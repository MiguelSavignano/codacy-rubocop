[
  {
    "patternId": "Bundler_DuplicatedGem",
    "title": "A Gem's requirements should be listed only once in a Gemfile.",
    "description": "A Gem's requirements should be listed only once in a Gemfile.",
    "timeToFix": 5
  },
  {
    "patternId": "Bundler_InsecureProtocolSource",
    "title": "The symbol argument `:gemcutter`, `:rubygems` and `:rubyforge`\nare deprecated. So please change your source to URL string that\n'https://rubygems.org' if possible, or 'http://rubygems.org' if not.\n\nThis autocorrect will replace these symbols with 'https://rubygems.org'.\nBecause it is secure, HTTPS request is strongly recommended. And in\nmost use cases HTTPS will be fine.\n\nHowever, it don't replace all `sources` of `http://` with `https://`.\nFor example, when specifying an internal gem server using HTTP on the\nintranet, a use case where HTTPS can not be specified was considered.\nConsider using HTTP only if you can not use HTTPS.",
    "description": "The symbol argument `:gemcutter`, `:rubygems` and `:rubyforge`\nare deprecated. So please change your source to URL string that\n'https://rubygems.org' if possible, or 'http://rubygems.org' if not.\n\nThis autocorrect will replace these symbols with 'https://rubygems.org'.\nBecause it is secure, HTTPS request is strongly recommended. And in\nmost use cases HTTPS will be fine.\n\nHowever, it don't replace all `sources` of `http://` with `https://`.\nFor example, when specifying an internal gem server using HTTP on the\nintranet, a use case where HTTPS can not be specified was considered.\nConsider using HTTP only if you can not use HTTPS.",
    "timeToFix": 5
  },
  {
    "patternId": "Bundler_OrderedGems",
    "title": "Gems should be alphabetically sorted within groups.",
    "description": "Gems should be alphabetically sorted within groups.",
    "timeToFix": 5
  },
  {
    "patternId": "Gemspec_DuplicatedAssignment",
    "title": "An attribute assignment method calls should be listed only once\nin a gemspec.\n\nAssigning to an attribute with the same name using `spec.foo =` will be\nan unintended usage. On the other hand, duplication of methods such\nas `spec.requirements`, `spec.add_runtime_dependency` and others are\npermitted because it is the intended use of appending values.",
    "description": "An attribute assignment method calls should be listed only once\nin a gemspec.\n\nAssigning to an attribute with the same name using `spec.foo =` will be\nan unintended usage. On the other hand, duplication of methods such\nas `spec.requirements`, `spec.add_runtime_dependency` and others are\npermitted because it is the intended use of appending values.",
    "timeToFix": 5
  },
  {
    "patternId": "Gemspec_OrderedDependencies",
    "title": "Dependencies in the gemspec should be alphabetically sorted.",
    "description": "Dependencies in the gemspec should be alphabetically sorted.",
    "timeToFix": 5
  },
  {
    "patternId": "Gemspec_RequiredRubyVersion",
    "title": "Checks that `required_ruby_version` of gemspec and `TargetRubyVersion`\nof .rubocop.yml are equal.\nThereby, RuboCop to perform static analysis working on the version\nrequired by gemspec.",
    "description": "Checks that `required_ruby_version` of gemspec and `TargetRubyVersion`\nof .rubocop.yml are equal.\nThereby, RuboCop to perform static analysis working on the version\nrequired by gemspec.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_AccessModifierIndentation",
    "title": "Modifiers should be indented as deep as method definitions, or as deep\nas the class/module keyword, depending on configuration.",
    "description": "Modifiers should be indented as deep as method definitions, or as deep\nas the class/module keyword, depending on configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_AlignArray",
    "title": "Here we check if the elements of a multi-line array literal are\naligned.",
    "description": "Here we check if the elements of a multi-line array literal are\naligned.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_AlignHash",
    "title": "Check that the keys, separators, and values of a multi-line hash\nliteral are aligned according to configuration. The configuration\noptions are:\n\n  - key (left align keys)\n  - separator (align hash rockets and colons, right align keys)\n  - table (left align keys, hash rockets, and values)\n\nThe treatment of hashes passed as the last argument to a method call\ncan also be configured. The options are:\n\n  - always_inspect\n  - always_ignore\n  - ignore_implicit (without curly braces)\n  - ignore_explicit (with curly braces)",
    "description": "Check that the keys, separators, and values of a multi-line hash\nliteral are aligned according to configuration. The configuration\noptions are:\n\n  - key (left align keys)\n  - separator (align hash rockets and colons, right align keys)\n  - table (left align keys, hash rockets, and values)\n\nThe treatment of hashes passed as the last argument to a method call\ncan also be configured. The options are:\n\n  - always_inspect\n  - always_ignore\n  - ignore_implicit (without curly braces)\n  - ignore_explicit (with curly braces)",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_AlignParameters",
    "title": "Here we check if the parameters on a multi-line method call or\ndefinition are aligned.",
    "description": "Here we check if the parameters on a multi-line method call or\ndefinition are aligned.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_BlockAlignment",
    "title": "This cop checks whether the end keywords are aligned properly for do\nend blocks.\n\nThree modes are supported through the `EnforcedStyleAlignWith`\nconfiguration parameter:\n\n`start_of_block` : the `end` shall be aligned with the\nstart of the line where the `do` appeared.\n\n`start_of_line` : the `end` shall be aligned with the\nstart of the line where the expression started.\n\n`either` (which is the default) : the `end` is allowed to be in either\nlocation. The autofixer will default to `start_of_line`.",
    "description": "This cop checks whether the end keywords are aligned properly for do\nend blocks.\n\nThree modes are supported through the `EnforcedStyleAlignWith`\nconfiguration parameter:\n\n`start_of_block` : the `end` shall be aligned with the\nstart of the line where the `do` appeared.\n\n`start_of_line` : the `end` shall be aligned with the\nstart of the line where the expression started.\n\n`either` (which is the default) : the `end` is allowed to be in either\nlocation. The autofixer will default to `start_of_line`.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_BlockEndNewline",
    "title": "This cop checks whether the end statement of a do..end block\nis on its own line.",
    "description": "This cop checks whether the end statement of a do..end block\nis on its own line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_CaseIndentation",
    "title": "This cop checks how the *when*s of a *case* expression\nare indented in relation to its *case* or *end* keyword.\n\nIt will register a separate offense for each misaligned *when*.",
    "description": "This cop checks how the *when*s of a *case* expression\nare indented in relation to its *case* or *end* keyword.\n\nIt will register a separate offense for each misaligned *when*.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ClassStructure",
    "title": "Checks if the code style follows the ExpectedOrder configuration:\n\n`Categories` allows us to map macro names into a category.\n\nConsider an example of code style that covers the following order:\n- Constants\n- Associations (has_one, has_many)\n- Attributes (attr_accessor, attr_writer, attr_reader)\n- Initializer\n- Instance methods\n- Protected methods\n- Private methods\n\nYou can configure the following order:\n\n```yaml\n Layout/ClassStructure:\n   Categories:\n     module_inclusion:\n       - include\n       - prepend\n       - extend\n   ExpectedOrder:\n       - module_inclusion\n       - constants\n       - public_class_methods\n       - initializer\n       - public_methods\n       - protected_methods\n       - private_methods\n\n```\nInstead of putting all literals in the expected order, is also\npossible to group categories of macros.\n\n```yaml\n Layout/ClassStructure:\n   Categories:\n     association:\n       - has_many\n       - has_one\n     attribute:\n       - attr_accessor\n       - attr_reader\n       - attr_writer\n```",
    "description": "Checks if the code style follows the ExpectedOrder configuration:\n\n`Categories` allows us to map macro names into a category.\n\nConsider an example of code style that covers the following order:\n- Constants\n- Associations (has_one, has_many)\n- Attributes (attr_accessor, attr_writer, attr_reader)\n- Initializer\n- Instance methods\n- Protected methods\n- Private methods\n\nYou can configure the following order:\n\n```yaml\n Layout/ClassStructure:\n   Categories:\n     module_inclusion:\n       - include\n       - prepend\n       - extend\n   ExpectedOrder:\n       - module_inclusion\n       - constants\n       - public_class_methods\n       - initializer\n       - public_methods\n       - protected_methods\n       - private_methods\n\n```\nInstead of putting all literals in the expected order, is also\npossible to group categories of macros.\n\n```yaml\n Layout/ClassStructure:\n   Categories:\n     association:\n       - has_many\n       - has_one\n     attribute:\n       - attr_accessor\n       - attr_reader\n       - attr_writer\n```",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ClosingParenthesisIndentation",
    "title": "This cops checks the indentation of hanging closing parentheses in\nmethod calls, method definitions, and grouped expressions. A hanging\nclosing parenthesis means `)` preceded by a line break.",
    "description": "This cops checks the indentation of hanging closing parentheses in\nmethod calls, method definitions, and grouped expressions. A hanging\nclosing parenthesis means `)` preceded by a line break.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_CommentIndentation",
    "title": "This cops checks the indentation of comments.",
    "description": "This cops checks the indentation of comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ConditionPosition",
    "title": "This cop checks for conditions that are not on the same line as\nif/while/until.",
    "description": "This cop checks for conditions that are not on the same line as\nif/while/until.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_DefEndAlignment",
    "title": "This cop checks whether the end keywords of method definitions are\naligned properly.\n\nTwo modes are supported through the EnforcedStyleAlignWith configuration\nparameter. If it's set to `start_of_line` (which is the default), the\n`end` shall be aligned with the start of the line where the `def`\nkeyword is. If it's set to `def`, the `end` shall be aligned with the\n`def` keyword.",
    "description": "This cop checks whether the end keywords of method definitions are\naligned properly.\n\nTwo modes are supported through the EnforcedStyleAlignWith configuration\nparameter. If it's set to `start_of_line` (which is the default), the\n`end` shall be aligned with the start of the line where the `def`\nkeyword is. If it's set to `def`, the `end` shall be aligned with the\n`def` keyword.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_DotPosition",
    "title": "This cop checks the . position in multi-line method calls.",
    "description": "This cop checks the . position in multi-line method calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ElseAlignment",
    "title": "This cops checks the alignment of else keywords. Normally they should\nbe aligned with an if/unless/while/until/begin/def keyword, but there\nare special cases when they should follow the same rules as the\nalignment of end.",
    "description": "This cops checks the alignment of else keywords. Normally they should\nbe aligned with an if/unless/while/until/begin/def keyword, but there\nare special cases when they should follow the same rules as the\nalignment of end.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyComment",
    "title": "This cop checks empty comment.",
    "description": "This cop checks empty comment.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineAfterMagicComment",
    "title": "Checks for a newline after the final magic comment.",
    "description": "Checks for a newline after the final magic comment.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineBetweenDefs",
    "title": "This cop checks whether method definitions are\nseparated by one empty line.\n\n`NumberOfEmptyLines` can be and integer (e.g. 1 by default) or\nan array (e.g. [1, 2]) to specificy a minimum and a maximum of\nempty lines.\n\n`AllowAdjacentOneLineDefs` can be used to configure is adjacent\none line methods definitions are an offense",
    "description": "This cop checks whether method definitions are\nseparated by one empty line.\n\n`NumberOfEmptyLines` can be and integer (e.g. 1 by default) or\nan array (e.g. [1, 2]) to specificy a minimum and a maximum of\nempty lines.\n\n`AllowAdjacentOneLineDefs` can be used to configure is adjacent\none line methods definitions are an offense",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundAccessModifier",
    "title": "Access modifiers should be surrounded by blank lines.",
    "description": "Access modifiers should be surrounded by blank lines.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundArguments",
    "title": "This cops checks if empty lines exist around the arguments\nof a method invocation.",
    "description": "This cops checks if empty lines exist around the arguments\nof a method invocation.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundBeginBody",
    "title": "This cops checks if empty lines exist around the bodies of begin-end\nblocks.",
    "description": "This cops checks if empty lines exist around the bodies of begin-end\nblocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundBlockBody",
    "title": "This cops checks if empty lines around the bodies of blocks match\nthe configuration.",
    "description": "This cops checks if empty lines around the bodies of blocks match\nthe configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundClassBody",
    "title": "This cops checks if empty lines around the bodies of classes match\nthe configuration.",
    "description": "This cops checks if empty lines around the bodies of classes match\nthe configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundExceptionHandlingKeywords",
    "title": "This cops checks if empty lines exist around the bodies of `begin`\nsections. This cop doesn't check empty lines at `begin` body\nbeginning/end and around method definition body.\n`Style/EmptyLinesAroundBeginBody` or `Style/EmptyLinesAroundMethodBody`\ncan be used for this purpose.",
    "description": "This cops checks if empty lines exist around the bodies of `begin`\nsections. This cop doesn't check empty lines at `begin` body\nbeginning/end and around method definition body.\n`Style/EmptyLinesAroundBeginBody` or `Style/EmptyLinesAroundMethodBody`\ncan be used for this purpose.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundMethodBody",
    "title": "This cops checks if empty lines exist around the bodies of methods.",
    "description": "This cops checks if empty lines exist around the bodies of methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundModuleBody",
    "title": "This cops checks if empty lines around the bodies of modules match\nthe configuration.",
    "description": "This cops checks if empty lines around the bodies of modules match\nthe configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLines",
    "title": "This cops checks for two or more consecutive blank lines.",
    "description": "This cops checks for two or more consecutive blank lines.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EndAlignment",
    "title": "This cop checks whether the end keywords are aligned properly.\n\nThree modes are supported through the `EnforcedStyleAlignWith`\nconfiguration parameter:\n\nIf it's set to `keyword` (which is the default), the `end`\nshall be aligned with the start of the keyword (if, class, etc.).\n\nIf it's set to `variable` the `end` shall be aligned with the\nleft-hand-side of the variable assignment, if there is one.\n\nIf it's set to `start_of_line`, the `end` shall be aligned with the\nstart of the line where the matching keyword appears.",
    "description": "This cop checks whether the end keywords are aligned properly.\n\nThree modes are supported through the `EnforcedStyleAlignWith`\nconfiguration parameter:\n\nIf it's set to `keyword` (which is the default), the `end`\nshall be aligned with the start of the keyword (if, class, etc.).\n\nIf it's set to `variable` the `end` shall be aligned with the\nleft-hand-side of the variable assignment, if there is one.\n\nIf it's set to `start_of_line`, the `end` shall be aligned with the\nstart of the line where the matching keyword appears.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EndOfLine",
    "title": "This cop checks for Windows-style line endings in the source code.",
    "description": "This cop checks for Windows-style line endings in the source code.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ExtraSpacing",
    "title": "This cop checks for extra/unnecessary whitespace.",
    "description": "This cop checks for extra/unnecessary whitespace.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstArrayElementLineBreak",
    "title": "This cop checks for a line break before the first element in a\nmulti-line array.",
    "description": "This cop checks for a line break before the first element in a\nmulti-line array.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstHashElementLineBreak",
    "title": "This cop checks for a line break before the first element in a\nmulti-line hash.",
    "description": "This cop checks for a line break before the first element in a\nmulti-line hash.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstMethodArgumentLineBreak",
    "title": "This cop checks for a line break before the first argument in a\nmulti-line method call.",
    "description": "This cop checks for a line break before the first argument in a\nmulti-line method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstMethodParameterLineBreak",
    "title": "This cop checks for a line break before the first parameter in a\nmulti-line method parameter definition.",
    "description": "This cop checks for a line break before the first parameter in a\nmulti-line method parameter definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstParameterIndentation",
    "title": "This cop checks the indentation of the first parameter in a method call.\nParameters after the first one are checked by Style/AlignParameters, not\nby this cop.",
    "description": "This cop checks the indentation of the first parameter in a method call.\nParameters after the first one are checked by Style/AlignParameters, not\nby this cop.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentArray",
    "title": "This cop checks the indentation of the first element in an array literal\nwhere the opening bracket and the first element are on separate lines.\nThe other elements' indentations are handled by the AlignArray cop.\n\nBy default, array literals that are arguments in a method call with\nparentheses, and where the opening square bracket of the array is on the\nsame line as the opening parenthesis of the method call, shall have\ntheir first element indented one step (two spaces) more than the\nposition inside the opening parenthesis.\n\nOther array literals shall have their first element indented one step\nmore than the start of the line where the opening square bracket is.\n\nThis default style is called 'special_inside_parentheses'. Alternative\nstyles are 'consistent' and 'align_brackets'. Here are examples:",
    "description": "This cop checks the indentation of the first element in an array literal\nwhere the opening bracket and the first element are on separate lines.\nThe other elements' indentations are handled by the AlignArray cop.\n\nBy default, array literals that are arguments in a method call with\nparentheses, and where the opening square bracket of the array is on the\nsame line as the opening parenthesis of the method call, shall have\ntheir first element indented one step (two spaces) more than the\nposition inside the opening parenthesis.\n\nOther array literals shall have their first element indented one step\nmore than the start of the line where the opening square bracket is.\n\nThis default style is called 'special_inside_parentheses'. Alternative\nstyles are 'consistent' and 'align_brackets'. Here are examples:",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentAssignment",
    "title": "This cop checks the indentation of the first line of the\nright-hand-side of a multi-line assignment.\n\nThe indentation of the remaining lines can be corrected with\nother cops such as `IndentationConsistency` and `EndAlignment`.",
    "description": "This cop checks the indentation of the first line of the\nright-hand-side of a multi-line assignment.\n\nThe indentation of the remaining lines can be corrected with\nother cops such as `IndentationConsistency` and `EndAlignment`.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentationConsistency",
    "title": "This cops checks for inconsistent indentation.\n\nThe difference between `rails` and `normal` is that the `rails` style\nprescribes that in classes and modules the `protected` and `private`\nmodifier keywords shall be indented the same as public methods and that\nprotected and private members shall be indented one step more than the\nmodifiers. Other than that, both styles mean that entities on the same\nlogical depth shall have the same indentation.",
    "description": "This cops checks for inconsistent indentation.\n\nThe difference between `rails` and `normal` is that the `rails` style\nprescribes that in classes and modules the `protected` and `private`\nmodifier keywords shall be indented the same as public methods and that\nprotected and private members shall be indented one step more than the\nmodifiers. Other than that, both styles mean that entities on the same\nlogical depth shall have the same indentation.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentationWidth",
    "title": "This cops checks for indentation that doesn't use the specified number\nof spaces.\n\nSee also the IndentationConsistency cop which is the companion to this\none.",
    "description": "This cops checks for indentation that doesn't use the specified number\nof spaces.\n\nSee also the IndentationConsistency cop which is the companion to this\none.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentHash",
    "title": "This cops checks the indentation of the first key in a hash literal\nwhere the opening brace and the first key are on separate lines. The\nother keys' indentations are handled by the AlignHash cop.\n\nBy default, Hash literals that are arguments in a method call with\nparentheses, and where the opening curly brace of the hash is on the\nsame line as the opening parenthesis of the method call, shall have\ntheir first key indented one step (two spaces) more than the position\ninside the opening parenthesis.\n\nOther hash literals shall have their first key indented one step more\nthan the start of the line where the opening curly brace is.\n\nThis default style is called 'special_inside_parentheses'. Alternative\nstyles are 'consistent' and 'align_braces'. Here are examples:",
    "description": "This cops checks the indentation of the first key in a hash literal\nwhere the opening brace and the first key are on separate lines. The\nother keys' indentations are handled by the AlignHash cop.\n\nBy default, Hash literals that are arguments in a method call with\nparentheses, and where the opening curly brace of the hash is on the\nsame line as the opening parenthesis of the method call, shall have\ntheir first key indented one step (two spaces) more than the position\ninside the opening parenthesis.\n\nOther hash literals shall have their first key indented one step more\nthan the start of the line where the opening curly brace is.\n\nThis default style is called 'special_inside_parentheses'. Alternative\nstyles are 'consistent' and 'align_braces'. Here are examples:",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentHeredoc",
    "title": "This cops checks the indentation of the here document bodies. The bodies\nare indented one step.\nIn Ruby 2.3 or newer, squiggly heredocs (`<<~`) should be used. If you\nuse the older rubies, you should introduce some library to your project\n(e.g. ActiveSupport, Powerpack or Unindent).\nNote: When `Metrics/LineLength`'s `AllowHeredoc` is false(not default),\n      this cop does not add any offenses for long here documents to\n      avoid `Metrics/LineLength`'s offenses.",
    "description": "This cops checks the indentation of the here document bodies. The bodies\nare indented one step.\nIn Ruby 2.3 or newer, squiggly heredocs (`<<~`) should be used. If you\nuse the older rubies, you should introduce some library to your project\n(e.g. ActiveSupport, Powerpack or Unindent).\nNote: When `Metrics/LineLength`'s `AllowHeredoc` is false(not default),\n      this cop does not add any offenses for long here documents to\n      avoid `Metrics/LineLength`'s offenses.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_InitialIndentation",
    "title": "This cops checks for indentation of the first non-blank non-comment\nline in a file.",
    "description": "This cops checks for indentation of the first non-blank non-comment\nline in a file.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_LeadingCommentSpace",
    "title": "This cop checks whether comments have a leading space after the\n`#` denoting the start of the comment. The leading space is not\nrequired for some RDoc special syntax, like `#++`, `#--`,\n`#:nodoc`, `=begin`- and `=end` comments, \"shebang\" directives,\nor rackup options.",
    "description": "This cop checks whether comments have a leading space after the\n`#` denoting the start of the comment. The leading space is not\nrequired for some RDoc special syntax, like `#++`, `#--`,\n`#:nodoc`, `=begin`- and `=end` comments, \"shebang\" directives,\nor rackup options.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineArrayBraceLayout",
    "title": "This cop checks that the closing brace in an array literal is either\non the same line as the last array element, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf an array's opening brace is on the same line as the first element\nof the array, then the closing brace should be on the same line as\nthe last element of the array.\n\nIf an array's opening brace is on the line above the first element\nof the array, then the closing brace should be on the line below\nthe last element of the array.\n\nWhen using the `new_line` style:\n\nThe closing brace of a multi-line array literal must be on the line\nafter the last element of the array.\n\nWhen using the `same_line` style:\n\nThe closing brace of a multi-line array literal must be on the same\nline as the last element of the array.",
    "description": "This cop checks that the closing brace in an array literal is either\non the same line as the last array element, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf an array's opening brace is on the same line as the first element\nof the array, then the closing brace should be on the same line as\nthe last element of the array.\n\nIf an array's opening brace is on the line above the first element\nof the array, then the closing brace should be on the line below\nthe last element of the array.\n\nWhen using the `new_line` style:\n\nThe closing brace of a multi-line array literal must be on the line\nafter the last element of the array.\n\nWhen using the `same_line` style:\n\nThe closing brace of a multi-line array literal must be on the same\nline as the last element of the array.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineAssignmentLayout",
    "title": "This cop checks whether the multiline assignments have a newline\nafter the assignment operator.",
    "description": "This cop checks whether the multiline assignments have a newline\nafter the assignment operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineBlockLayout",
    "title": "This cop checks whether the multiline do end blocks have a newline\nafter the start of the block. Additionally, it checks whether the block\narguments, if any, are on the same line as the start of the block.",
    "description": "This cop checks whether the multiline do end blocks have a newline\nafter the start of the block. Additionally, it checks whether the block\narguments, if any, are on the same line as the start of the block.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineHashBraceLayout",
    "title": "This cop checks that the closing brace in a hash literal is either\non the same line as the last hash element, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf a hash's opening brace is on the same line as the first element\nof the hash, then the closing brace should be on the same line as\nthe last element of the hash.\n\nIf a hash's opening brace is on the line above the first element\nof the hash, then the closing brace should be on the line below\nthe last element of the hash.\n\nWhen using the `new_line` style:\n\nThe closing brace of a multi-line hash literal must be on the line\nafter the last element of the hash.\n\nWhen using the `same_line` style:\n\nThe closing brace of a multi-line hash literal must be on the same\nline as the last element of the hash.",
    "description": "This cop checks that the closing brace in a hash literal is either\non the same line as the last hash element, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf a hash's opening brace is on the same line as the first element\nof the hash, then the closing brace should be on the same line as\nthe last element of the hash.\n\nIf a hash's opening brace is on the line above the first element\nof the hash, then the closing brace should be on the line below\nthe last element of the hash.\n\nWhen using the `new_line` style:\n\nThe closing brace of a multi-line hash literal must be on the line\nafter the last element of the hash.\n\nWhen using the `same_line` style:\n\nThe closing brace of a multi-line hash literal must be on the same\nline as the last element of the hash.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineMethodCallBraceLayout",
    "title": "This cop checks that the closing brace in a method call is either\non the same line as the last method argument, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf a method call's opening brace is on the same line as the first\nargument of the call, then the closing brace should be on the same\nline as the last argument of the call.\n\nIf an method call's opening brace is on the line above the first\nargument of the call, then the closing brace should be on the line\nbelow the last argument of the call.\n\nWhen using the `new_line` style:\n\nThe closing brace of a multi-line method call must be on the line\nafter the last argument of the call.\n\nWhen using the `same_line` style:\n\nThe closing brace of a multi-line method call must be on the same\nline as the last argument of the call.",
    "description": "This cop checks that the closing brace in a method call is either\non the same line as the last method argument, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf a method call's opening brace is on the same line as the first\nargument of the call, then the closing brace should be on the same\nline as the last argument of the call.\n\nIf an method call's opening brace is on the line above the first\nargument of the call, then the closing brace should be on the line\nbelow the last argument of the call.\n\nWhen using the `new_line` style:\n\nThe closing brace of a multi-line method call must be on the line\nafter the last argument of the call.\n\nWhen using the `same_line` style:\n\nThe closing brace of a multi-line method call must be on the same\nline as the last argument of the call.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineMethodCallIndentation",
    "title": "This cop checks the indentation of the method name part in method calls\nthat span more than one line.",
    "description": "This cop checks the indentation of the method name part in method calls\nthat span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineMethodDefinitionBraceLayout",
    "title": "This cop checks that the closing brace in a method definition is either\non the same line as the last method parameter, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf a method definition's opening brace is on the same line as the\nfirst parameter of the definition, then the closing brace should be\non the same line as the last parameter of the definition.\n\nIf an method definition's opening brace is on the line above the first\nparameter of the definition, then the closing brace should be on the\nline below the last parameter of the definition.\n\nWhen using the `new_line` style:\n\nThe closing brace of a multi-line method definition must be on the line\nafter the last parameter of the definition.\n\nWhen using the `same_line` style:\n\nThe closing brace of a multi-line method definition must be on the same\nline as the last parameter of the definition.",
    "description": "This cop checks that the closing brace in a method definition is either\non the same line as the last method parameter, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf a method definition's opening brace is on the same line as the\nfirst parameter of the definition, then the closing brace should be\non the same line as the last parameter of the definition.\n\nIf an method definition's opening brace is on the line above the first\nparameter of the definition, then the closing brace should be on the\nline below the last parameter of the definition.\n\nWhen using the `new_line` style:\n\nThe closing brace of a multi-line method definition must be on the line\nafter the last parameter of the definition.\n\nWhen using the `same_line` style:\n\nThe closing brace of a multi-line method definition must be on the same\nline as the last parameter of the definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineOperationIndentation",
    "title": "This cop checks the indentation of the right hand side operand in\nbinary operations that span more than one line.",
    "description": "This cop checks the indentation of the right hand side operand in\nbinary operations that span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_RescueEnsureAlignment",
    "title": "This cop checks whether the rescue and ensure keywords are aligned\nproperly.",
    "description": "This cop checks whether the rescue and ensure keywords are aligned\nproperly.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterColon",
    "title": "Checks for colon (:) not followed by some kind of space.\nN.B. this cop does not handle spaces after a ternary operator, which are\ninstead handled by Layout/SpaceAroundOperators.",
    "description": "Checks for colon (:) not followed by some kind of space.\nN.B. this cop does not handle spaces after a ternary operator, which are\ninstead handled by Layout/SpaceAroundOperators.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterComma",
    "title": "Checks for comma (,) not followed by some kind of space.",
    "description": "Checks for comma (,) not followed by some kind of space.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterMethodName",
    "title": "Checks for space between a method name and a left parenthesis in defs.",
    "description": "Checks for space between a method name and a left parenthesis in defs.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterNot",
    "title": "This cop checks for space after `!`.",
    "description": "This cop checks for space after `!`.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterSemicolon",
    "title": "Checks for semicolon (;) not followed by some kind of space.",
    "description": "Checks for semicolon (;) not followed by some kind of space.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundBlockParameters",
    "title": "Checks the spacing inside and after block parameters pipes.",
    "description": "Checks the spacing inside and after block parameters pipes.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundEqualsInParameterDefault",
    "title": "Checks that the equals signs in parameter default assignments\nhave or don't have surrounding space depending on configuration.",
    "description": "Checks that the equals signs in parameter default assignments\nhave or don't have surrounding space depending on configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundKeyword",
    "title": "Checks the spacing around the keywords.",
    "description": "Checks the spacing around the keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundOperators",
    "title": "Checks that operators have space around them, except for **\nwhich should not have surrounding space.",
    "description": "Checks that operators have space around them, except for **\nwhich should not have surrounding space.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeBlockBraces",
    "title": "Checks that block braces have or don't have a space before the opening\nbrace depending on configuration.",
    "description": "Checks that block braces have or don't have a space before the opening\nbrace depending on configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeComma",
    "title": "Checks for comma (,) preceded by space.",
    "description": "Checks for comma (,) preceded by space.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeComment",
    "title": "This cop checks for missing space between a token and a comment on the\nsame line.",
    "description": "This cop checks for missing space between a token and a comment on the\nsame line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeFirstArg",
    "title": "Checks that exactly one space is used between a method name and the\nfirst argument for method calls without parentheses.\n\nAlternatively, extra spaces can be added to align the argument with\nsomething on a preceding or following line, if the AllowForAlignment\nconfig parameter is true.",
    "description": "Checks that exactly one space is used between a method name and the\nfirst argument for method calls without parentheses.\n\nAlternatively, extra spaces can be added to align the argument with\nsomething on a preceding or following line, if the AllowForAlignment\nconfig parameter is true.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeSemicolon",
    "title": "Checks for semicolon (;) preceded by space.",
    "description": "Checks for semicolon (;) preceded by space.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInLambdaLiteral",
    "title": "This cop checks for spaces between -> and opening parameter\nbrace in lambda literals.",
    "description": "This cop checks for spaces between -> and opening parameter\nbrace in lambda literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideArrayPercentLiteral",
    "title": "Checks for unnecessary additional spaces inside array percent literals\n(i.e. %i/%w).",
    "description": "Checks for unnecessary additional spaces inside array percent literals\n(i.e. %i/%w).",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideArrayLiteralBrackets",
    "title": "Checks that brackets used for array literals have or don't have\nsurrounding space depending on configuration.",
    "description": "Checks that brackets used for array literals have or don't have\nsurrounding space depending on configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideBlockBraces",
    "title": "Checks that block braces have or don't have surrounding space inside\nthem on configuration. For blocks taking parameters, it checks that the\nleft brace has or doesn't have trailing space depending on\nconfiguration.",
    "description": "Checks that block braces have or don't have surrounding space inside\nthem on configuration. For blocks taking parameters, it checks that the\nleft brace has or doesn't have trailing space depending on\nconfiguration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideHashLiteralBraces",
    "title": "Checks that braces used for hash literals have or don't have\nsurrounding space depending on configuration.",
    "description": "Checks that braces used for hash literals have or don't have\nsurrounding space depending on configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideParens",
    "title": "Checks for spaces inside ordinary round parentheses.",
    "description": "Checks for spaces inside ordinary round parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsidePercentLiteralDelimiters",
    "title": "Checks for unnecessary additional spaces inside the delimiters of\n%i/%w/%x literals.",
    "description": "Checks for unnecessary additional spaces inside the delimiters of\n%i/%w/%x literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideRangeLiteral",
    "title": "Checks for spaces inside range literals.",
    "description": "Checks for spaces inside range literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideReferenceBrackets",
    "title": "Checks that reference brackets have or don't have\nsurrounding space depending on configuration.",
    "description": "Checks that reference brackets have or don't have\nsurrounding space depending on configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideStringInterpolation",
    "title": "This cop checks for whitespace within string interpolations.",
    "description": "This cop checks for whitespace within string interpolations.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_Tab",
    "title": "This cop checks for tabs inside the source code.",
    "description": "This cop checks for tabs inside the source code.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_TrailingBlankLines",
    "title": "This cop looks for trailing blank lines and a final newline in the\nsource code.",
    "description": "This cop looks for trailing blank lines and a final newline in the\nsource code.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_TrailingWhitespace",
    "title": "This cop looks for trailing whitespace in the source code.",
    "description": "This cop looks for trailing whitespace in the source code.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousBlockAssociation",
    "title": "This cop checks for ambiguous block association with method\nwhen param passed without parentheses.",
    "description": "This cop checks for ambiguous block association with method\nwhen param passed without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousOperator",
    "title": "This cop checks for ambiguous operators in the first argument of a\nmethod invocation without parentheses.",
    "description": "This cop checks for ambiguous operators in the first argument of a\nmethod invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousRegexpLiteral",
    "title": "This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.",
    "description": "This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AssignmentInCondition",
    "title": "This cop checks for assignments in the conditions of\nif/while/until.",
    "description": "This cop checks for assignments in the conditions of\nif/while/until.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_BigDecimalNew",
    "title": "`BigDecimal.new()` is deprecated since BigDecimal 1.3.3.\nThis cop identifies places where `BigDecimal.new()`\ncan be replaced by `BigDecimal()`.",
    "description": "`BigDecimal.new()` is deprecated since BigDecimal 1.3.3.\nThis cop identifies places where `BigDecimal.new()`\ncan be replaced by `BigDecimal()`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_BooleanSymbol",
    "title": "This cop checks for `:true` and `:false` symbols.\nIn most cases it would be a typo.",
    "description": "This cop checks for `:true` and `:false` symbols.\nIn most cases it would be a typo.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_CircularArgumentReference",
    "title": "This cop checks for circular argument references in optional keyword\narguments and optional ordinal arguments.\n\nThis cop mirrors a warning produced by MRI since 2.2.",
    "description": "This cop checks for circular argument references in optional keyword\narguments and optional ordinal arguments.\n\nThis cop mirrors a warning produced by MRI since 2.2.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Debugger",
    "title": "This cop checks for calls to debugger or pry.",
    "description": "This cop checks for calls to debugger or pry.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DeprecatedClassMethods",
    "title": "This cop checks for uses of the deprecated class method usages.",
    "description": "This cop checks for uses of the deprecated class method usages.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateCaseCondition",
    "title": "This cop checks that there are no repeated conditions\nused in case 'when' expressions.",
    "description": "This cop checks that there are no repeated conditions\nused in case 'when' expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateMethods",
    "title": "This cop checks for duplicated instance (or singleton) method\ndefinitions.",
    "description": "This cop checks for duplicated instance (or singleton) method\ndefinitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicatedKey",
    "title": "This cop checks for duplicated keys in hash literals.\n\nThis cop mirrors a warning in Ruby 2.2.",
    "description": "This cop checks for duplicated keys in hash literals.\n\nThis cop mirrors a warning in Ruby 2.2.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EachWithObjectArgument",
    "title": "This cop checks if each_with_object is called with an immutable\nargument. Since the argument is the object that the given block shall\nmake calls on to build something based on the enumerable that\neach_with_object iterates over, an immutable argument makes no sense.\nIt's definitely a bug.",
    "description": "This cop checks if each_with_object is called with an immutable\nargument. Since the argument is the object that the given block shall\nmake calls on to build something based on the enumerable that\neach_with_object iterates over, an immutable argument makes no sense.\nIt's definitely a bug.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ElseLayout",
    "title": "This cop checks for odd else block layout - like\nhaving an expression on the same line as the else keyword,\nwhich is usually a mistake.",
    "description": "This cop checks for odd else block layout - like\nhaving an expression on the same line as the else keyword,\nwhich is usually a mistake.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyEnsure",
    "title": "This cop checks for empty `ensure` blocks",
    "description": "This cop checks for empty `ensure` blocks",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyExpression",
    "title": "This cop checks for the presence of empty expressions.",
    "description": "This cop checks for the presence of empty expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyInterpolation",
    "title": "This cop checks for empty interpolation.",
    "description": "This cop checks for empty interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyWhen",
    "title": "This cop checks for the presence of `when` branches without a body.",
    "description": "This cop checks for the presence of `when` branches without a body.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EndInMethod",
    "title": "This cop checks for END blocks in method definitions.",
    "description": "This cop checks for END blocks in method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EnsureReturn",
    "title": "This cop checks for *return* from an *ensure* block.",
    "description": "This cop checks for *return* from an *ensure* block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FloatOutOfRange",
    "title": "This cop identifies Float literals which are, like, really really really\nreally really really really really big. Too big. No-one needs Floats\nthat big. If you need a float that big, something is wrong with you.",
    "description": "This cop identifies Float literals which are, like, really really really\nreally really really really really big. Too big. No-one needs Floats\nthat big. If you need a float that big, something is wrong with you.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FormatParameterMismatch",
    "title": "This lint sees if there is a mismatch between the number of\nexpected fields for format/sprintf/#% and what is actually\npassed as arguments.",
    "description": "This lint sees if there is a mismatch between the number of\nexpected fields for format/sprintf/#% and what is actually\npassed as arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_HandleExceptions",
    "title": "This cop checks for *rescue* blocks with no body.",
    "description": "This cop checks for *rescue* blocks with no body.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ImplicitStringConcatenation",
    "title": "This cop checks for implicit string concatenation of string literals\nwhich are on the same line.",
    "description": "This cop checks for implicit string concatenation of string literals\nwhich are on the same line.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_InheritException",
    "title": "This cop looks for error classes inheriting from `Exception`\nand its standard library subclasses, excluding subclasses of\n`StandardError`. It is configurable to suggest using either\n`RuntimeError` (default) or `StandardError` instead.",
    "description": "This cop looks for error classes inheriting from `Exception`\nand its standard library subclasses, excluding subclasses of\n`StandardError`. It is configurable to suggest using either\n`RuntimeError` (default) or `StandardError` instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_IneffectiveAccessModifier",
    "title": "This cop checks for `private` or `protected` access modifiers which are\napplied to a singleton method. These access modifiers do not make\nsingleton methods private/protected. `private_class_method` can be\nused for that.",
    "description": "This cop checks for `private` or `protected` access modifiers which are\napplied to a singleton method. These access modifiers do not make\nsingleton methods private/protected. `private_class_method` can be\nused for that.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_InterpolationCheck",
    "title": "This cop checks for interpolation in a single quoted string.",
    "description": "This cop checks for interpolation in a single quoted string.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralAsCondition",
    "title": "This cop checks for literals used as the conditions or as\noperands in and/or expressions serving as the conditions of\nif/while/until.",
    "description": "This cop checks for literals used as the conditions or as\noperands in and/or expressions serving as the conditions of\nif/while/until.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralInInterpolation",
    "title": "This cop checks for interpolated literals.",
    "description": "This cop checks for interpolated literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Loop",
    "title": "This cop checks for uses of *begin...end while/until something*.",
    "description": "This cop checks for uses of *begin...end while/until something*.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_MissingCopEnableDirective",
    "title": "This cop checks that there is an `# rubocop:enable ...` statement\nafter a `# rubocop:disable ...` statement. This will prevent leaving\ncop disables on wide ranges of code, that latter contributors to\na file wouldn't be aware of.",
    "description": "This cop checks that there is an `# rubocop:enable ...` statement\nafter a `# rubocop:disable ...` statement. This will prevent leaving\ncop disables on wide ranges of code, that latter contributors to\na file wouldn't be aware of.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_MultipleCompare",
    "title": "In math and Python, we can use `x < y < z` style comparison to compare\nmultiple value. However, we can't use the comparison in Ruby. However,\nthe comparison is not syntax error. This cop checks the bad usage of\ncomparison operators.",
    "description": "In math and Python, we can use `x < y < z` style comparison to compare\nmultiple value. However, we can't use the comparison in Ruby. However,\nthe comparison is not syntax error. This cop checks the bad usage of\ncomparison operators.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NestedMethodDefinition",
    "title": "This cop checks for nested method definitions.",
    "description": "This cop checks for nested method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NestedPercentLiteral",
    "title": "This cop checks for nested percent literals.",
    "description": "This cop checks for nested percent literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NextWithoutAccumulator",
    "title": "Don't omit the accumulator when calling `next` in a `reduce` block.",
    "description": "Don't omit the accumulator when calling `next` in a `reduce` block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NonLocalExitFromIterator",
    "title": "This cop checks for non-local exits from iterators without a return\nvalue. It registers an offense under these conditions:\n\n - No value is returned,\n - the block is preceded by a method chain,\n - the block has arguments,\n - the method which receives the block is not `define_method`\n   or `define_singleton_method`,\n - the return is not contained in an inner scope, e.g. a lambda or a\n   method definition.",
    "description": "This cop checks for non-local exits from iterators without a return\nvalue. It registers an offense under these conditions:\n\n - No value is returned,\n - the block is preceded by a method chain,\n - the block has arguments,\n - the method which receives the block is not `define_method`\n   or `define_singleton_method`,\n - the return is not contained in an inner scope, e.g. a lambda or a\n   method definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NumberConversion",
    "title": "This cop warns the usage of unsafe number conversions. Unsafe\nnumber conversion can cause unexpected error if auto type conversion\nfails. Cop prefer parsing with number class instead.",
    "description": "This cop warns the usage of unsafe number conversions. Unsafe\nnumber conversion can cause unexpected error if auto type conversion\nfails. Cop prefer parsing with number class instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_OrderedMagicComments",
    "title": "Checks the proper ordering of magic comments and whether\na magic comment is not placed before a shebang.",
    "description": "Checks the proper ordering of magic comments and whether\na magic comment is not placed before a shebang.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ParenthesesAsGroupedExpression",
    "title": "Checks for space between the name of a called method and a left\nparenthesis.",
    "description": "Checks for space between the name of a called method and a left\nparenthesis.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_PercentStringArray",
    "title": "This cop checks for quotes and commas in %w, e.g. `%w('foo', \"bar\")`\n\nIt is more likely that the additional characters are unintended (for\nexample, mistranslating an array of literals to percent string notation)\nrather than meant to be part of the resulting strings.",
    "description": "This cop checks for quotes and commas in %w, e.g. `%w('foo', \"bar\")`\n\nIt is more likely that the additional characters are unintended (for\nexample, mistranslating an array of literals to percent string notation)\nrather than meant to be part of the resulting strings.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_PercentSymbolArray",
    "title": "This cop checks for colons and commas in %i, e.g. `%i(:foo, :bar)`\n\nIt is more likely that the additional characters are unintended (for\nexample, mistranslating an array of literals to percent string notation)\nrather than meant to be part of the resulting symbols.",
    "description": "This cop checks for colons and commas in %i, e.g. `%i(:foo, :bar)`\n\nIt is more likely that the additional characters are unintended (for\nexample, mistranslating an array of literals to percent string notation)\nrather than meant to be part of the resulting symbols.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RandOne",
    "title": "This cop checks for `rand(1)` calls.\nSuch calls always return `0`.",
    "description": "This cop checks for `rand(1)` calls.\nSuch calls always return `0`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantWithIndex",
    "title": "This cop checks for redundant `with_index`.",
    "description": "This cop checks for redundant `with_index`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantWithObject",
    "title": "This cop checks for redundant `with_object`.",
    "description": "This cop checks for redundant `with_object`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RegexpAsCondition",
    "title": "This cop checks for regexp literals used as `match-current-line`.\nIf a regexp literal is in condition, the regexp matches `$_` implicitly.",
    "description": "This cop checks for regexp literals used as `match-current-line`.\nIf a regexp literal is in condition, the regexp matches `$_` implicitly.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RequireParentheses",
    "title": "This cop checks for expressions where there is a call to a predicate\nmethod with at least one argument, where no parentheses are used around\nthe parameter list, and a boolean operator, && or ||, is used in the\nlast argument.\n\nThe idea behind warning for these constructs is that the user might\nbe under the impression that the return value from the method call is\nan operand of &&/||.",
    "description": "This cop checks for expressions where there is a call to a predicate\nmethod with at least one argument, where no parentheses are used around\nthe parameter list, and a boolean operator, && or ||, is used in the\nlast argument.\n\nThe idea behind warning for these constructs is that the user might\nbe under the impression that the return value from the method call is\nan operand of &&/||.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueException",
    "title": "This cop checks for *rescue* blocks targeting the Exception class.",
    "description": "This cop checks for *rescue* blocks targeting the Exception class.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueType",
    "title": "Check for arguments to `rescue` that will result in a `TypeError`\nif an exception is raised.",
    "description": "Check for arguments to `rescue` that will result in a `TypeError`\nif an exception is raised.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ReturnInVoidContext",
    "title": "This cop checks for the use of a return with a value in a context\nwhere the value will be ignored. (initialize and setter methods)",
    "description": "This cop checks for the use of a return with a value in a context\nwhere the value will be ignored. (initialize and setter methods)",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SafeNavigationConsistency",
    "title": "This cop check to make sure that if safe navigation is used for a method\ncall in an `&&` or `||` condition that safe navigation is used for all\nmethod calls on that same object.",
    "description": "This cop check to make sure that if safe navigation is used for a method\ncall in an `&&` or `||` condition that safe navigation is used for all\nmethod calls on that same object.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SafeNavigationChain",
    "title": "The safe navigation operator returns nil if the receiver is\nnil.  If you chain an ordinary method call after a safe\nnavigation operator, it raises NoMethodError.  We should use a\nsafe navigation operator after a safe navigation operator.\nThis cop checks for the problem outlined above.",
    "description": "The safe navigation operator returns nil if the receiver is\nnil.  If you chain an ordinary method call after a safe\nnavigation operator, it raises NoMethodError.  We should use a\nsafe navigation operator after a safe navigation operator.\nThis cop checks for the problem outlined above.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ScriptPermission",
    "title": "This cop checks if a file which has a shebang line as\nits first line is granted execute permission.",
    "description": "This cop checks if a file which has a shebang line as\nits first line is granted execute permission.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowedArgument",
    "title": "This cop checks for shadowed arguments.",
    "description": "This cop checks for shadowed arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowedException",
    "title": "This cop checks for a rescued exception that get shadowed by a\nless specific exception being rescued before a more specific\nexception is rescued.",
    "description": "This cop checks for a rescued exception that get shadowed by a\nless specific exception being rescued before a more specific\nexception is rescued.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowingOuterLocalVariable",
    "title": "This cop looks for use of the same name as outer local variables\nfor block arguments or block local variables.\nThis is a mimic of the warning\n\"shadowing outer local variable - foo\" from `ruby -cw`.",
    "description": "This cop looks for use of the same name as outer local variables\nfor block arguments or block local variables.\nThis is a mimic of the warning\n\"shadowing outer local variable - foo\" from `ruby -cw`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_StringConversionInInterpolation",
    "title": "This cop checks for string conversion in string interpolation,\nwhich is redundant.",
    "description": "This cop checks for string conversion in string interpolation,\nwhich is redundant.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Syntax",
    "title": "This is actually not a cop and inspects nothing. It just provides\nmethods to repack Parser's diagnostics/errors into RuboCop's offenses.",
    "description": "This is actually not a cop and inspects nothing. It just provides\nmethods to repack Parser's diagnostics/errors into RuboCop's offenses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnderscorePrefixedVariableName",
    "title": "This cop checks for underscore-prefixed variables that are actually\nused.",
    "description": "This cop checks for underscore-prefixed variables that are actually\nused.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnifiedInteger",
    "title": "This cop checks for using Fixnum or Bignum constant.",
    "description": "This cop checks for using Fixnum or Bignum constant.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnneededCopDisableDirective",
    "title": "This cop detects instances of rubocop:disable comments that can be\nremoved without causing any offenses to be reported. It's implemented\nas a cop in that it inherits from the Cop base class and calls\nadd_offense. The unusual part of its implementation is that it doesn't\nhave any on_* methods or an investigate method. This means that it\ndoesn't take part in the investigation phase when the other cops do\ntheir work. Instead, it waits until it's called in a later stage of the\nexecution. The reason it can't be implemented as a normal cop is that\nit depends on the results of all other cops to do its work.",
    "description": "This cop detects instances of rubocop:disable comments that can be\nremoved without causing any offenses to be reported. It's implemented\nas a cop in that it inherits from the Cop base class and calls\nadd_offense. The unusual part of its implementation is that it doesn't\nhave any on_* methods or an investigate method. This means that it\ndoesn't take part in the investigation phase when the other cops do\ntheir work. Instead, it waits until it's called in a later stage of the\nexecution. The reason it can't be implemented as a normal cop is that\nit depends on the results of all other cops to do its work.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnneededCopEnableDirective",
    "title": "This cop detects instances of rubocop:enable comments that can be\nremoved.",
    "description": "This cop detects instances of rubocop:enable comments that can be\nremoved.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnneededRequireStatement",
    "title": "Checks for unnecessary `require` statement.\n\nThe following features are unnecessary `require` statement because\nthey are already loaded.\n\nruby -ve 'p $LOADED_FEATURES.reject { |feature| %r|/| =~ feature }'\nruby 2.2.8p477 (2017-09-14 revision 59906) [x86_64-darwin13]\n[\"enumerator.so\", \"rational.so\", \"complex.so\", \"thread.rb\"]\n\nThis cop targets Ruby 2.2 or higher containing these 4 features.",
    "description": "Checks for unnecessary `require` statement.\n\nThe following features are unnecessary `require` statement because\nthey are already loaded.\n\nruby -ve 'p $LOADED_FEATURES.reject { |feature| %r|/| =~ feature }'\nruby 2.2.8p477 (2017-09-14 revision 59906) [x86_64-darwin13]\n[\"enumerator.so\", \"rational.so\", \"complex.so\", \"thread.rb\"]\n\nThis cop targets Ruby 2.2 or higher containing these 4 features.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnneededSplatExpansion",
    "title": "This cop checks for unneeded usages of splat expansion",
    "description": "This cop checks for unneeded usages of splat expansion",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnreachableCode",
    "title": "This cop checks for unreachable code.\nThe check are based on the presence of flow of control\nstatement in non-final position in *begin*(implicit) blocks.",
    "description": "This cop checks for unreachable code.\nThe check are based on the presence of flow of control\nstatement in non-final position in *begin*(implicit) blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnusedBlockArgument",
    "title": "This cop checks for unused block arguments.",
    "description": "This cop checks for unused block arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnusedMethodArgument",
    "title": "This cop checks for unused method arguments.",
    "description": "This cop checks for unused method arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UriEscapeUnescape",
    "title": "This cop identifies places where `URI.escape` can be replaced by\n`CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component`\ndepending on your specific use case.\nAlso this cop identifies places where `URI.unescape` can be replaced by\n`CGI.unescape`, `URI.decode_www_form` or `URI.decode_www_form_component`\ndepending on your specific use case.",
    "description": "This cop identifies places where `URI.escape` can be replaced by\n`CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component`\ndepending on your specific use case.\nAlso this cop identifies places where `URI.unescape` can be replaced by\n`CGI.unescape`, `URI.decode_www_form` or `URI.decode_www_form_component`\ndepending on your specific use case.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UriRegexp",
    "title": "This cop identifies places where `URI.regexp` is obsolete and should\nnot be used. Instead, use `URI::DEFAULT_PARSER.make_regexp`.",
    "description": "This cop identifies places where `URI.regexp` is obsolete and should\nnot be used. Instead, use `URI::DEFAULT_PARSER.make_regexp`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAccessModifier",
    "title": "This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.",
    "description": "This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, and leading `public` modifiers in a\nclass or module body. Conditionally-defined methods are considered as\nalways being defined, and thus access modifiers guarding such methods\nare not redundant.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAssignment",
    "title": "This cop checks for every useless assignment to local variable in every\nscope.\nThe basic idea for this cop was from the warning of `ruby -cw`:\n\n  assigned but unused variable - foo\n\nCurrently this cop has advanced logic that detects unreferenced\nreassignments and properly handles varied cases such as branch, loop,\nrescue, ensure, etc.",
    "description": "This cop checks for every useless assignment to local variable in every\nscope.\nThe basic idea for this cop was from the warning of `ruby -cw`:\n\n  assigned but unused variable - foo\n\nCurrently this cop has advanced logic that detects unreferenced\nreassignments and properly handles varied cases such as branch, loop,\nrescue, ensure, etc.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessComparison",
    "title": "This cop checks for comparison of something with itself.",
    "description": "This cop checks for comparison of something with itself.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessElseWithoutRescue",
    "title": "This cop checks for useless `else` in `begin..end` without `rescue`.",
    "description": "This cop checks for useless `else` in `begin..end` without `rescue`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessSetterCall",
    "title": "This cop checks for setter call to local variable as the final\nexpression of a function definition.",
    "description": "This cop checks for setter call to local variable as the final\nexpression of a function definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Void",
    "title": "This cop checks for operators, variables, literals, and nonmutating\nmethods used in void context.",
    "description": "This cop checks for operators, variables, literals, and nonmutating\nmethods used in void context.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_CyclomaticComplexity",
    "title": "This cop checks that the cyclomatic complexity of methods is not higher\nthan the configured maximum. The cyclomatic complexity is the number of\nlinearly independent paths through a method. The algorithm counts\ndecision points and adds one.\n\nAn if statement (or unless or ?:) increases the complexity by one. An\nelse branch does not, since it doesn't add a decision point. The &&\noperator (or keyword and) can be converted to a nested if statement,\nand ||/or is shorthand for a sequence of ifs, so they also add one.\nLoops can be said to have an exit condition, so they add one.",
    "description": "This cop checks that the cyclomatic complexity of methods is not higher\nthan the configured maximum. The cyclomatic complexity is the number of\nlinearly independent paths through a method. The algorithm counts\ndecision points and adds one.\n\nAn if statement (or unless or ?:) increases the complexity by one. An\nelse branch does not, since it doesn't add a decision point. The &&\noperator (or keyword and) can be converted to a nested if statement,\nand ||/or is shorthand for a sequence of ifs, so they also add one.\nLoops can be said to have an exit condition, so they add one.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_AbcSize",
    "title": "This cop checks that the ABC size of methods is not higher than the\nconfigured maximum. The ABC size is based on assignments, branches\n(method calls), and conditions. See http://c2.com/cgi/wiki?AbcMetric",
    "description": "This cop checks that the ABC size of methods is not higher than the\nconfigured maximum. The ABC size is based on assignments, branches\n(method calls), and conditions. See http://c2.com/cgi/wiki?AbcMetric",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_BlockLength",
    "title": "This cop checks if the length of a block exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable.\nThe cop can be configured to ignore blocks passed to certain methods.",
    "description": "This cop checks if the length of a block exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable.\nThe cop can be configured to ignore blocks passed to certain methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_BlockNesting",
    "title": "This cop checks for excessive nesting of conditional and looping\nconstructs.\n\nYou can configure if blocks are considered using the `CountBlocks`\noption. When set to `false` (the default) blocks are not counted\ntowards the nesting level. Set to `true` to count blocks as well.\n\nThe maximum level of nesting allowed is configurable.",
    "description": "This cop checks for excessive nesting of conditional and looping\nconstructs.\n\nYou can configure if blocks are considered using the `CountBlocks`\noption. When set to `false` (the default) blocks are not counted\ntowards the nesting level. Set to `true` to count blocks as well.\n\nThe maximum level of nesting allowed is configurable.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_ClassLength",
    "title": "This cop checks if the length a class exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable.",
    "description": "This cop checks if the length a class exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_LineLength",
    "title": "This cop checks the length of lines in the source code.\nThe maximum length is configurable.",
    "description": "This cop checks the length of lines in the source code.\nThe maximum length is configurable.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_MethodLength",
    "title": "This cop checks if the length of a method exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable.",
    "description": "This cop checks if the length of a method exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_ModuleLength",
    "title": "This cop checks if the length a module exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable.",
    "description": "This cop checks if the length a module exceeds some maximum value.\nComment lines can optionally be ignored.\nThe maximum allowed length is configurable.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_ParameterLists",
    "title": "This cop checks for methods with too many parameters.\nThe maximum number of parameters is configurable.\nKeyword arguments can optionally be excluded from the total count.",
    "description": "This cop checks for methods with too many parameters.\nThe maximum number of parameters is configurable.\nKeyword arguments can optionally be excluded from the total count.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_PerceivedComplexity",
    "title": "This cop tries to produce a complexity score that's a measure of the\ncomplexity the reader experiences when looking at a method. For that\nreason it considers `when` nodes as something that doesn't add as much\ncomplexity as an `if` or a `&&`. Except if it's one of those special\n`case`/`when` constructs where there's no expression after `case`. Then\nthe cop treats it as an `if`/`elsif`/`elsif`... and lets all the `when`\nnodes count. In contrast to the CyclomaticComplexity cop, this cop\nconsiders `else` nodes as adding complexity.",
    "description": "This cop tries to produce a complexity score that's a measure of the\ncomplexity the reader experiences when looking at a method. For that\nreason it considers `when` nodes as something that doesn't add as much\ncomplexity as an `if` or a `&&`. Except if it's one of those special\n`case`/`when` constructs where there's no expression after `case`. Then\nthe cop treats it as an `if`/`elsif`/`elsif`... and lets all the `when`\nnodes count. In contrast to the CyclomaticComplexity cop, this cop\nconsiders `else` nodes as adding complexity.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_AccessorMethodName",
    "title": "This cop makes sure that accessor methods are named properly.",
    "description": "This cop makes sure that accessor methods are named properly.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_AsciiIdentifiers",
    "title": "This cop checks for non-ascii characters in identifier names.",
    "description": "This cop checks for non-ascii characters in identifier names.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_ClassAndModuleCamelCase",
    "title": "This cops checks for class and module names with\nan underscore in them.",
    "description": "This cops checks for class and module names with\nan underscore in them.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_ConstantName",
    "title": "This cop checks whether constant names are written using\nSCREAMING_SNAKE_CASE.\n\nTo avoid false positives, it ignores cases in which we cannot know\nfor certain the type of value that would be assigned to a constant.",
    "description": "This cop checks whether constant names are written using\nSCREAMING_SNAKE_CASE.\n\nTo avoid false positives, it ignores cases in which we cannot know\nfor certain the type of value that would be assigned to a constant.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_FileName",
    "title": "This cop makes sure that Ruby source files have snake_case\nnames. Ruby scripts (i.e. source files with a shebang in the\nfirst line) are ignored.",
    "description": "This cop makes sure that Ruby source files have snake_case\nnames. Ruby scripts (i.e. source files with a shebang in the\nfirst line) are ignored.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_HeredocDelimiterCase",
    "title": "This cop checks that your heredocs are using the configured case.\nBy default it is configured to enforce uppercase heredocs.",
    "description": "This cop checks that your heredocs are using the configured case.\nBy default it is configured to enforce uppercase heredocs.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_HeredocDelimiterNaming",
    "title": "This cop checks that your heredocs are using meaningful delimiters.\nBy default it disallows `END` and `EO*`, and can be configured through\nblacklisting additional delimiters.",
    "description": "This cop checks that your heredocs are using meaningful delimiters.\nBy default it disallows `END` and `EO*`, and can be configured through\nblacklisting additional delimiters.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_MemoizedInstanceVariableName",
    "title": "This cop checks for memoized methods whose instance variable name\ndoes not match the method name.",
    "description": "This cop checks for memoized methods whose instance variable name\ndoes not match the method name.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_MethodName",
    "title": "This cop makes sure that all methods use the configured style,\nsnake_case or camelCase, for their names.",
    "description": "This cop makes sure that all methods use the configured style,\nsnake_case or camelCase, for their names.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_BinaryOperatorParameterName",
    "title": "This cop makes sure that certain binary operator methods have their\nsole  parameter named `other`.",
    "description": "This cop makes sure that certain binary operator methods have their\nsole  parameter named `other`.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_PredicateName",
    "title": "This cop makes sure that predicates are named properly.",
    "description": "This cop makes sure that predicates are named properly.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_UncommunicativeBlockParamName",
    "title": "This cop checks block parameter names for how descriptive they\nare. It is highly configurable.\n\nThe `MinNameLength` config option takes an integer. It represents\nthe minimum amount of characters the name must be. Its default is 1.\nThe `AllowNamesEndingInNumbers` config option takes a boolean. When\nset to false, this cop will register offenses for names ending with\nnumbers. Its default is false. The `AllowedNames` config option\ntakes an array of whitelisted names that will never register an\noffense. The `ForbiddenNames` config option takes an array of\nblacklisted names that will always register an offense.",
    "description": "This cop checks block parameter names for how descriptive they\nare. It is highly configurable.\n\nThe `MinNameLength` config option takes an integer. It represents\nthe minimum amount of characters the name must be. Its default is 1.\nThe `AllowNamesEndingInNumbers` config option takes a boolean. When\nset to false, this cop will register offenses for names ending with\nnumbers. Its default is false. The `AllowedNames` config option\ntakes an array of whitelisted names that will never register an\noffense. The `ForbiddenNames` config option takes an array of\nblacklisted names that will always register an offense.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_UncommunicativeMethodParamName",
    "title": "This cop checks method parameter names for how descriptive they\nare. It is highly configurable.\n\nThe `MinNameLength` config option takes an integer. It represents\nthe minimum amount of characters the name must be. Its default is 3.\nThe `AllowNamesEndingInNumbers` config option takes a boolean. When\nset to false, this cop will register offenses for names ending with\nnumbers. Its default is false. The `AllowedNames` config option\ntakes an array of whitelisted names that will never register an\noffense. The `ForbiddenNames` config option takes an array of\nblacklisted names that will always register an offense.",
    "description": "This cop checks method parameter names for how descriptive they\nare. It is highly configurable.\n\nThe `MinNameLength` config option takes an integer. It represents\nthe minimum amount of characters the name must be. Its default is 3.\nThe `AllowNamesEndingInNumbers` config option takes a boolean. When\nset to false, this cop will register offenses for names ending with\nnumbers. Its default is false. The `AllowedNames` config option\ntakes an array of whitelisted names that will never register an\noffense. The `ForbiddenNames` config option takes an array of\nblacklisted names that will always register an offense.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_VariableName",
    "title": "This cop makes sure that all variables use the configured style,\nsnake_case or camelCase, for their names.",
    "description": "This cop makes sure that all variables use the configured style,\nsnake_case or camelCase, for their names.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_VariableNumber",
    "title": "This cop makes sure that all numbered variables use the\nconfigured style, snake_case, normalcase or non_integer,\nfor their numbering.",
    "description": "This cop makes sure that all numbered variables use the\nconfigured style, snake_case, normalcase or non_integer,\nfor their numbering.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Caller",
    "title": "This cop identifies places where `caller[n]`\ncan be replaced by `caller(n..n).first`.",
    "description": "This cop identifies places where `caller[n]`\ncan be replaced by `caller(n..n).first`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_CaseWhenSplat",
    "title": "Place `when` conditions that use splat at the end\nof the list of `when` branches.\n\nRuby has to allocate memory for the splat expansion every time\nthat the `case` `when` statement is run. Since Ruby does not support\nfall through inside of `case` `when`, like some other languages do,\nthe order of the `when` branches does not matter. By placing any\nsplat expansions at the end of the list of `when` branches we will\nreduce the number of times that memory has to be allocated for\nthe expansion.\n\nThis is not a guaranteed performance improvement. If the data being\nprocessed by the `case` condition is normalized in a manner that favors\nhitting a condition in the splat expansion, it is possible that\nmoving the splat condition to the end will use more memory,\nand run slightly slower.",
    "description": "Place `when` conditions that use splat at the end\nof the list of `when` branches.\n\nRuby has to allocate memory for the splat expansion every time\nthat the `case` `when` statement is run. Since Ruby does not support\nfall through inside of `case` `when`, like some other languages do,\nthe order of the `when` branches does not matter. By placing any\nsplat expansions at the end of the list of `when` branches we will\nreduce the number of times that memory has to be allocated for\nthe expansion.\n\nThis is not a guaranteed performance improvement. If the data being\nprocessed by the `case` condition is normalized in a manner that favors\nhitting a condition in the splat expansion, it is possible that\nmoving the splat condition to the end will use more memory,\nand run slightly slower.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Casecmp",
    "title": "This cop identifies places where a case-insensitive string comparison\ncan better be implemented using `casecmp`.",
    "description": "This cop identifies places where a case-insensitive string comparison\ncan better be implemented using `casecmp`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Count",
    "title": "This cop is used to identify usages of `count` on an `Enumerable` that\nfollow calls to `select` or `reject`. Querying logic can instead be\npassed to the `count` call.\n\n`ActiveRecord` compatibility:\n`ActiveRecord` will ignore the block that is passed to `count`.\nOther methods, such as `select`, will convert the association to an\narray and then run the block on the array. A simple work around to\nmake `count` work with a block is to call `to_a.count {...}`.\n\nExample:\n  Model.where(id: [1, 2, 3].select { |m| m.method == true }.size\n\n  becomes:\n\n  Model.where(id: [1, 2, 3]).to_a.count { |m| m.method == true }",
    "description": "This cop is used to identify usages of `count` on an `Enumerable` that\nfollow calls to `select` or `reject`. Querying logic can instead be\npassed to the `count` call.\n\n`ActiveRecord` compatibility:\n`ActiveRecord` will ignore the block that is passed to `count`.\nOther methods, such as `select`, will convert the association to an\narray and then run the block on the array. A simple work around to\nmake `count` work with a block is to call `to_a.count {...}`.\n\nExample:\n  Model.where(id: [1, 2, 3].select { |m| m.method == true }.size\n\n  becomes:\n\n  Model.where(id: [1, 2, 3]).to_a.count { |m| m.method == true }",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Detect",
    "title": "This cop is used to identify usages of\n`select.first`, `select.last`, `find_all.first`, and `find_all.last`\nand change them to use `detect` instead.\n\n`ActiveRecord` compatibility:\n`ActiveRecord` does not implement a `detect` method and `find` has its\nown meaning. Correcting ActiveRecord methods with this cop should be\nconsidered unsafe.",
    "description": "This cop is used to identify usages of\n`select.first`, `select.last`, `find_all.first`, and `find_all.last`\nand change them to use `detect` instead.\n\n`ActiveRecord` compatibility:\n`ActiveRecord` does not implement a `detect` method and `find` has its\nown meaning. Correcting ActiveRecord methods with this cop should be\nconsidered unsafe.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_DoubleStartEndWith",
    "title": "This cop checks for double `#start_with?` or `#end_with?` calls\nseparated by `||`. In some cases such calls can be replaced\nwith an single `#start_with?`/`#end_with?` call.",
    "description": "This cop checks for double `#start_with?` or `#end_with?` calls\nseparated by `||`. In some cases such calls can be replaced\nwith an single `#start_with?`/`#end_with?` call.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_EndWith",
    "title": "This cop identifies unnecessary use of a regex where `String#end_with?`\nwould suffice.",
    "description": "This cop identifies unnecessary use of a regex where `String#end_with?`\nwould suffice.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_FixedSize",
    "title": "Do not compute the size of statically sized objects.",
    "description": "Do not compute the size of statically sized objects.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_FlatMap",
    "title": "This cop is used to identify usages of",
    "description": "This cop is used to identify usages of",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_LstripRstrip",
    "title": "This cop identifies places where `lstrip.rstrip` can be replaced by\n`strip`.",
    "description": "This cop identifies places where `lstrip.rstrip` can be replaced by\n`strip`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RangeInclude",
    "title": "This cop identifies uses of `Range#include?`, which iterates over each\nitem in a `Range` to see if a specified item is there. In contrast,\n`Range#cover?` simply compares the target item with the beginning and\nend points of the `Range`. In a great majority of cases, this is what\nis wanted.\n\nHere is an example of a case where `Range#cover?` may not provide the\ndesired result:\n\n    ('a'..'z').cover?('yellow') # => true",
    "description": "This cop identifies uses of `Range#include?`, which iterates over each\nitem in a `Range` to see if a specified item is there. In contrast,\n`Range#cover?` simply compares the target item with the beginning and\nend points of the `Range`. In a great majority of cases, this is what\nis wanted.\n\nHere is an example of a case where `Range#cover?` may not provide the\ndesired result:\n\n    ('a'..'z').cover?('yellow') # => true",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantBlockCall",
    "title": "This cop identifies the use of a `&block` parameter and `block.call`\nwhere `yield` would do just as well.",
    "description": "This cop identifies the use of a `&block` parameter and `block.call`\nwhere `yield` would do just as well.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantMatch",
    "title": "This cop identifies the use of `Regexp#match` or `String#match`, which\nreturns `#<MatchData>`/`nil`. The return value of `=~` is an integral\nindex/`nil` and is more performant.",
    "description": "This cop identifies the use of `Regexp#match` or `String#match`, which\nreturns `#<MatchData>`/`nil`. The return value of `=~` is an integral\nindex/`nil` and is more performant.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantMerge",
    "title": "This cop identifies places where `Hash#merge!` can be replaced by\n`Hash#[]=`.",
    "description": "This cop identifies places where `Hash#merge!` can be replaced by\n`Hash#[]=`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantSortBy",
    "title": "This cop identifies places where `sort_by { ... }` can be replaced by\n`sort`.",
    "description": "This cop identifies places where `sort_by { ... }` can be replaced by\n`sort`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RegexpMatch",
    "title": "In Ruby 2.4, `String#match?`, `Regexp#match?` and `Symbol#match?`\nhave been added. The methods are faster than `match`.\nBecause the methods avoid creating a `MatchData` object or saving\nbackref.\nSo, when `MatchData` is not used, use `match?` instead of `match`.",
    "description": "In Ruby 2.4, `String#match?`, `Regexp#match?` and `Symbol#match?`\nhave been added. The methods are faster than `match`.\nBecause the methods avoid creating a `MatchData` object or saving\nbackref.\nSo, when `MatchData` is not used, use `match?` instead of `match`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ReverseEach",
    "title": "This cop is used to identify usages of `reverse.each` and\nchange them to use `reverse_each` instead.",
    "description": "This cop is used to identify usages of `reverse.each` and\nchange them to use `reverse_each` instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Sample",
    "title": "This cop is used to identify usages of `shuffle.first`, `shuffle.last`\nand `shuffle[]` and change them to use `sample` instead.",
    "description": "This cop is used to identify usages of `shuffle.first`, `shuffle.last`\nand `shuffle[]` and change them to use `sample` instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Size",
    "title": "This cop is used to identify usages of `count` on an\n`Array` and `Hash` and change them to `size`.\n\nTODO: Add advanced detection of variables that could\nhave been assigned to an array or a hash.",
    "description": "This cop is used to identify usages of `count` on an\n`Array` and `Hash` and change them to `size`.\n\nTODO: Add advanced detection of variables that could\nhave been assigned to an array or a hash.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_CompareWithBlock",
    "title": "This cop identifies places where `sort { |a, b| a.foo <=> b.foo }`\ncan be replaced by `sort_by(&:foo)`.\nThis cop also checks `max` and `min` methods.",
    "description": "This cop identifies places where `sort { |a, b| a.foo <=> b.foo }`\ncan be replaced by `sort_by(&:foo)`.\nThis cop also checks `max` and `min` methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_StartWith",
    "title": "This cop identifies unnecessary use of a regex where\n`String#start_with?` would suffice.",
    "description": "This cop identifies unnecessary use of a regex where\n`String#start_with?` would suffice.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_StringReplacement",
    "title": "This cop identifies places where `gsub` can be replaced by\n`tr` or `delete`.",
    "description": "This cop identifies places where `gsub` can be replaced by\n`tr` or `delete`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_TimesMap",
    "title": "This cop checks for .times.map calls.\nIn most cases such calls can be replaced\nwith an explicit array creation.",
    "description": "This cop checks for .times.map calls.\nIn most cases such calls can be replaced\nwith an explicit array creation.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_UnfreezeString",
    "title": "In Ruby 2.3 or later, use unary plus operator to unfreeze a string\nliteral instead of `String#dup` and `String.new`.\nUnary plus operator is faster than `String#dup`.\n\nNote: `String.new` (without operator) is not exactly the same as `+''`.\nThese differ in encoding. `String.new.encoding` is always `ASCII-8BIT`.\nHowever, `(+'').encoding` is the same as script encoding(e.g. `UTF-8`).\nSo, if you expect `ASCII-8BIT` encoding, disable this cop.",
    "description": "In Ruby 2.3 or later, use unary plus operator to unfreeze a string\nliteral instead of `String#dup` and `String.new`.\nUnary plus operator is faster than `String#dup`.\n\nNote: `String.new` (without operator) is not exactly the same as `+''`.\nThese differ in encoding. `String.new.encoding` is always `ASCII-8BIT`.\nHowever, `(+'').encoding` is the same as script encoding(e.g. `UTF-8`).\nSo, if you expect `ASCII-8BIT` encoding, disable this cop.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_UnneededSort",
    "title": "This cop is used to identify instances of sorting and then\ntaking only the first or last element. The same behavior can\nbe accomplished without a relatively expensive sort by using\n`Enumerable#min` instead of sorting and taking the first\nelement and `Enumerable#max` instead of sorting and taking the\nlast element. Similarly, `Enumerable#min_by` and\n`Enumerable#max_by` can replace `Enumerable#sort_by` calls\nafter which only the first or last element is used.",
    "description": "This cop is used to identify instances of sorting and then\ntaking only the first or last element. The same behavior can\nbe accomplished without a relatively expensive sort by using\n`Enumerable#min` instead of sorting and taking the first\nelement and `Enumerable#max` instead of sorting and taking the\nlast element. Similarly, `Enumerable#min_by` and\n`Enumerable#max_by` can replace `Enumerable#sort_by` calls\nafter which only the first or last element is used.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_UriDefaultParser",
    "title": "This cop identifies places where `URI::Parser.new`\ncan be replaced by `URI::DEFAULT_PARSER`.",
    "description": "This cop identifies places where `URI::Parser.new`\ncan be replaced by `URI::DEFAULT_PARSER`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Alias",
    "title": "This cop enforces the use of either `#alias` or `#alias_method`\ndepending on configuration.\nIt also flags uses of `alias :symbol` rather than `alias bareword`.",
    "description": "This cop enforces the use of either `#alias` or `#alias_method`\ndepending on configuration.\nIt also flags uses of `alias :symbol` rather than `alias bareword`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AndOr",
    "title": "This cop checks for uses of `and` and `or`, and suggests using `&&` and\n`|| instead`. It can be configured to check only in conditions, or in\nall contexts.",
    "description": "This cop checks for uses of `and` and `or`, and suggests using `&&` and\n`|| instead`. It can be configured to check only in conditions, or in\nall contexts.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ArrayJoin",
    "title": "This cop checks for uses of \"*\" as a substitute for *join*.\n\nNot all cases can reliably checked, due to Ruby's dynamic\ntypes, so we consider only cases when the first argument is an\narray literal or the second is a string literal.",
    "description": "This cop checks for uses of \"*\" as a substitute for *join*.\n\nNot all cases can reliably checked, due to Ruby's dynamic\ntypes, so we consider only cases when the first argument is an\narray literal or the second is a string literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AsciiComments",
    "title": "This cop checks for non-ascii (non-English) characters\nin comments. You could set an array of allowed non-ascii chars in\nAllowedChars attribute (empty by default).",
    "description": "This cop checks for non-ascii (non-English) characters\nin comments. You could set an array of allowed non-ascii chars in\nAllowedChars attribute (empty by default).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Attr",
    "title": "This cop checks for uses of Module#attr.",
    "description": "This cop checks for uses of Module#attr.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AutoResourceCleanup",
    "title": "This cop checks for cases when you could use a block\naccepting version of a method that does automatic\nresource cleanup.",
    "description": "This cop checks for cases when you could use a block\naccepting version of a method that does automatic\nresource cleanup.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BarePercentLiterals",
    "title": "This cop checks if usage of %() or %Q() matches configuration.",
    "description": "This cop checks if usage of %() or %Q() matches configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BeginBlock",
    "title": "This cop checks for BEGIN blocks.",
    "description": "This cop checks for BEGIN blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BlockComments",
    "title": "This cop looks for uses of block comments (=begin...=end).",
    "description": "This cop looks for uses of block comments (=begin...=end).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BlockDelimiters",
    "title": "Check for uses of braces or do/end around single line or\nmulti-line blocks.",
    "description": "Check for uses of braces or do/end around single line or\nmulti-line blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BracesAroundHashParameters",
    "title": "This cop checks for braces around the last parameter in a method call\nif the last parameter is a hash.\nIt supports `braces`, `no_braces` and `context_dependent` styles.",
    "description": "This cop checks for braces around the last parameter in a method call\nif the last parameter is a hash.\nIt supports `braces`, `no_braces` and `context_dependent` styles.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CaseEquality",
    "title": "This cop checks for uses of the case equality operator(===).",
    "description": "This cop checks for uses of the case equality operator(===).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CharacterLiteral",
    "title": "Checks for uses of the character literal ?x.",
    "description": "Checks for uses of the character literal ?x.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassAndModuleChildren",
    "title": "This cop checks the style of children definitions at classes and\nmodules. Basically there are two different styles:\n\nThe compact style is only forced for classes/modules with one child.",
    "description": "This cop checks the style of children definitions at classes and\nmodules. Basically there are two different styles:\n\nThe compact style is only forced for classes/modules with one child.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassCheck",
    "title": "This cop enforces consistent use of `Object#is_a?` or `Object#kind_of?`.",
    "description": "This cop enforces consistent use of `Object#is_a?` or `Object#kind_of?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassMethods",
    "title": "This cop checks for uses of the class/module name instead of\nself, when defining class/module methods.",
    "description": "This cop checks for uses of the class/module name instead of\nself, when defining class/module methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassVars",
    "title": "This cop checks for uses of class variables. Offenses\nare signaled only on assignment to class variables to\nreduce the number of offenses that would be reported.\n\nYou have to be careful when setting a value for a class\nvariable; if a class has been inherited, changing the\nvalue of a class variable also affects the inheriting\nclasses. This means that it's almost always better to\nuse a class instance variable instead.",
    "description": "This cop checks for uses of class variables. Offenses\nare signaled only on assignment to class variables to\nreduce the number of offenses that would be reported.\n\nYou have to be careful when setting a value for a class\nvariable; if a class has been inherited, changing the\nvalue of a class variable also affects the inheriting\nclasses. This means that it's almost always better to\nuse a class instance variable instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CollectionMethods",
    "title": "This cop enforces the use of consistent method names\nfrom the Enumerable module.\n\nUnfortunately we cannot actually know if a method is from\nEnumerable or not (static analysis limitation), so this cop\ncan yield some false positives.",
    "description": "This cop enforces the use of consistent method names\nfrom the Enumerable module.\n\nUnfortunately we cannot actually know if a method is from\nEnumerable or not (static analysis limitation), so this cop\ncan yield some false positives.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ColonMethodCall",
    "title": "This cop checks for methods invoked via the :: operator instead\nof the . operator (like FileUtils::rmdir instead of FileUtils.rmdir).",
    "description": "This cop checks for methods invoked via the :: operator instead\nof the . operator (like FileUtils::rmdir instead of FileUtils.rmdir).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ColonMethodDefinition",
    "title": "This cop checks for class methods that are defined using the `::`\noperator instead of the `.` operator.",
    "description": "This cop checks for class methods that are defined using the `::`\noperator instead of the `.` operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CommandLiteral",
    "title": "This cop enforces using `` or %x around command literals.",
    "description": "This cop enforces using `` or %x around command literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CommentAnnotation",
    "title": "This cop checks that comment annotation keywords are written according\nto guidelines.",
    "description": "This cop checks that comment annotation keywords are written according\nto guidelines.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CommentedKeyword",
    "title": "This cop checks for comments put on the same line as some keywords.\nThese keywords are: `begin`, `class`, `def`, `end`, `module`.\n\nNote that some comments (such as `:nodoc:` and `rubocop:disable`) are\nallowed.",
    "description": "This cop checks for comments put on the same line as some keywords.\nThese keywords are: `begin`, `class`, `def`, `end`, `module`.\n\nNote that some comments (such as `:nodoc:` and `rubocop:disable`) are\nallowed.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ConditionalAssignment",
    "title": "Check for `if` and `case` statements where each branch is used for\nassignment to the same variable when using the return of the\ncondition can be used instead.",
    "description": "Check for `if` and `case` statements where each branch is used for\nassignment to the same variable when using the return of the\ncondition can be used instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Copyright",
    "title": "Check that a copyright notice was given in each source file.\n\nThe default regexp for an acceptable copyright notice can be found in\nconfig/default.yml.  The default can be changed as follows:\n\n    Style/Copyright:\n      Notice: '^Copyright (\\(c\\) )?2\\d{3} Acme Inc'\n\nThis regex string is treated as an unanchored regex.  For each file\nthat RuboCop scans, a comment that matches this regex must be found or\nan offense is reported.",
    "description": "Check that a copyright notice was given in each source file.\n\nThe default regexp for an acceptable copyright notice can be found in\nconfig/default.yml.  The default can be changed as follows:\n\n    Style/Copyright:\n      Notice: '^Copyright (\\(c\\) )?2\\d{3} Acme Inc'\n\nThis regex string is treated as an unanchored regex.  For each file\nthat RuboCop scans, a comment that matches this regex must be found or\nan offense is reported.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DateTime",
    "title": "This cop checks for uses of `DateTime` that should be replaced by\n`Date` or `Time`.",
    "description": "This cop checks for uses of `DateTime` that should be replaced by\n`Date` or `Time`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DefWithParentheses",
    "title": "This cop checks for parentheses in the definition of a method,\nthat does not take any arguments. Both instance and\nclass/singleton methods are checked.",
    "description": "This cop checks for parentheses in the definition of a method,\nthat does not take any arguments. Both instance and\nclass/singleton methods are checked.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Dir",
    "title": "This cop checks for places where the `#__dir__` method can replace more\ncomplex constructs to retrieve a canonicalized absolute path to the\ncurrent file.",
    "description": "This cop checks for places where the `#__dir__` method can replace more\ncomplex constructs to retrieve a canonicalized absolute path to the\ncurrent file.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DocumentationMethod",
    "title": "This cop checks for missing documentation comment for public methods.\nIt can optionally be configured to also require documentation for\nnon-public methods.",
    "description": "This cop checks for missing documentation comment for public methods.\nIt can optionally be configured to also require documentation for\nnon-public methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Documentation",
    "title": "This cop checks for missing top-level documentation of\nclasses and modules. Classes with no body are exempt from the\ncheck and so are namespace modules - modules that have nothing in\ntheir bodies except classes, other modules, or constant definitions.\n\nThe documentation requirement is annulled if the class or module has\na \"#:nodoc:\" comment next to it. Likewise, \"#:nodoc: all\" does the\nsame for all its children.",
    "description": "This cop checks for missing top-level documentation of\nclasses and modules. Classes with no body are exempt from the\ncheck and so are namespace modules - modules that have nothing in\ntheir bodies except classes, other modules, or constant definitions.\n\nThe documentation requirement is annulled if the class or module has\na \"#:nodoc:\" comment next to it. Likewise, \"#:nodoc: all\" does the\nsame for all its children.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DoubleNegation",
    "title": "This cop checks for uses of double negation (!!) to convert something\nto a boolean value. As this is both cryptic and usually redundant, it\nshould be avoided.\n\nPlease, note that when something is a boolean value\n!!something and !something.nil? are not the same thing.\nAs you're unlikely to write code that can accept values of any type\nthis is rarely a problem in practice.",
    "description": "This cop checks for uses of double negation (!!) to convert something\nto a boolean value. As this is both cryptic and usually redundant, it\nshould be avoided.\n\nPlease, note that when something is a boolean value\n!!something and !something.nil? are not the same thing.\nAs you're unlikely to write code that can accept values of any type\nthis is rarely a problem in practice.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EachForSimpleLoop",
    "title": "This cop checks for loops which iterate a constant number of times,\nusing a Range literal and `#each`. This can be done more readably using\n`Integer#times`.\n\nThis check only applies if the block takes no parameters.",
    "description": "This cop checks for loops which iterate a constant number of times,\nusing a Range literal and `#each`. This can be done more readably using\n`Integer#times`.\n\nThis check only applies if the block takes no parameters.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EachWithObject",
    "title": "This cop looks for inject / reduce calls where the passed in object is\nreturned at the end and so could be replaced by each_with_object without\nthe need to return the object at the end.\n\nHowever, we can't replace with each_with_object if the accumulator\nparameter is assigned to within the block.",
    "description": "This cop looks for inject / reduce calls where the passed in object is\nreturned at the end and so could be replaced by each_with_object without\nthe need to return the object at the end.\n\nHowever, we can't replace with each_with_object if the accumulator\nparameter is assigned to within the block.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyBlockParameter",
    "title": "This cop checks for pipes for empty block parameters. Pipes for empty\nblock parameters do not cause syntax errors, but they are redundant.",
    "description": "This cop checks for pipes for empty block parameters. Pipes for empty\nblock parameters do not cause syntax errors, but they are redundant.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyCaseCondition",
    "title": "This cop checks for case statements with an empty condition.",
    "description": "This cop checks for case statements with an empty condition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyElse",
    "title": "Checks for empty else-clauses, possibly including comments and/or an\nexplicit `nil` depending on the EnforcedStyle.",
    "description": "Checks for empty else-clauses, possibly including comments and/or an\nexplicit `nil` depending on the EnforcedStyle.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLambdaParameter",
    "title": "This cop checks for parentheses for empty lambda parameters. Parentheses\nfor empty lambda parameters do not cause syntax errors, but they are\nredundant.",
    "description": "This cop checks for parentheses for empty lambda parameters. Parentheses\nfor empty lambda parameters do not cause syntax errors, but they are\nredundant.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLineAfterGuardClause",
    "title": "This cop enforces empty line after guard clause",
    "description": "This cop enforces empty line after guard clause",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLiteral",
    "title": "This cop checks for the use of a method, the result of which\nwould be a literal, like an empty array, hash or string.",
    "description": "This cop checks for the use of a method, the result of which\nwould be a literal, like an empty array, hash or string.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyMethod",
    "title": "This cop checks for the formatting of empty method definitions.\nBy default it enforces empty method definitions to go on a single\nline (compact style), but it can be configured to enforce the `end`\nto go on its own line (expanded style).\n\nNote: A method definition is not considered empty if it contains\n      comments.",
    "description": "This cop checks for the formatting of empty method definitions.\nBy default it enforces empty method definitions to go on a single\nline (compact style), but it can be configured to enforce the `end`\nto go on its own line (expanded style).\n\nNote: A method definition is not considered empty if it contains\n      comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Encoding",
    "title": "This cop checks ensures source files have no utf-8 encoding comments.",
    "description": "This cop checks ensures source files have no utf-8 encoding comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EndBlock",
    "title": "This cop checks for END blocks.",
    "description": "This cop checks for END blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EvalWithLocation",
    "title": "This cop checks `eval` method usage. `eval` can receive source location\nmetadata, that are filename and line number. The metadata is used by\nbacktraces. This cop recommends to pass the metadata to `eval` method.",
    "description": "This cop checks `eval` method usage. `eval` can receive source location\nmetadata, that are filename and line number. The metadata is used by\nbacktraces. This cop recommends to pass the metadata to `eval` method.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EvenOdd",
    "title": "This cop checks for places where Integer#even? or Integer#odd?\nshould have been used.",
    "description": "This cop checks for places where Integer#even? or Integer#odd?\nshould have been used.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ExpandPathArguments",
    "title": "This cop checks for use of the `File.expand_path` arguments.\nLikewise, it also checks for the `Pathname.new` argument.\n\nContrastive bad case and good case are alternately shown in\nthe following examples.",
    "description": "This cop checks for use of the `File.expand_path` arguments.\nLikewise, it also checks for the `Pathname.new` argument.\n\nContrastive bad case and good case are alternately shown in\nthe following examples.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FlipFlop",
    "title": "This cop looks for uses of flip flop operator",
    "description": "This cop looks for uses of flip flop operator",
    "timeToFix": 5
  },
  {
    "patternId": "Style_For",
    "title": "This cop looks for uses of the *for* keyword, or *each* method. The\npreferred alternative is set in the EnforcedStyle configuration\nparameter. An *each* call with a block on a single line is always\nallowed, however.",
    "description": "This cop looks for uses of the *for* keyword, or *each* method. The\npreferred alternative is set in the EnforcedStyle configuration\nparameter. An *each* call with a block on a single line is always\nallowed, however.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FormatString",
    "title": "This cop enforces the use of a single string formatting utility.\nValid options include Kernel#format, Kernel#sprintf and String#%.\n\nThe detection of String#% cannot be implemented in a reliable\nmanner for all cases, so only two scenarios are considered -\nif the first argument is a string literal and if the second\nargument is an array literal.",
    "description": "This cop enforces the use of a single string formatting utility.\nValid options include Kernel#format, Kernel#sprintf and String#%.\n\nThe detection of String#% cannot be implemented in a reliable\nmanner for all cases, so only two scenarios are considered -\nif the first argument is a string literal and if the second\nargument is an array literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FormatStringToken",
    "title": "Use a consistent style for named format string tokens.\n\n**Note:**\n`unannotated` style cop only works for strings\nwhich are passed as arguments to those methods:\n`sprintf`, `format`, `%`.\nThe reason is that *unannotated* format is very similar\nto encoded URLs or Date/Time formatting strings.",
    "description": "Use a consistent style for named format string tokens.\n\n**Note:**\n`unannotated` style cop only works for strings\nwhich are passed as arguments to those methods:\n`sprintf`, `format`, `%`.\nThe reason is that *unannotated* format is very similar\nto encoded URLs or Date/Time formatting strings.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FrozenStringLiteralComment",
    "title": "This cop is designed to help upgrade to Ruby 3.0. It will add the\ncomment `# frozen_string_literal: true` to the top of files to\nenable frozen string literals. Frozen string literals may be default\nin Ruby 3.0. The comment will be added below a shebang and encoding\ncomment. The frozen string literal comment is only valid in Ruby 2.3+.",
    "description": "This cop is designed to help upgrade to Ruby 3.0. It will add the\ncomment `# frozen_string_literal: true` to the top of files to\nenable frozen string literals. Frozen string literals may be default\nin Ruby 3.0. The comment will be added below a shebang and encoding\ncomment. The frozen string literal comment is only valid in Ruby 2.3+.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_GlobalVars",
    "title": "This cops looks for uses of global variables.\nIt does not report offenses for built-in global variables.\nBuilt-in global variables are allowed by default. Additionally\nusers can allow additional variables via the AllowedVariables option.\n\nNote that backreferences like $1, $2, etc are not global variables.",
    "description": "This cops looks for uses of global variables.\nIt does not report offenses for built-in global variables.\nBuilt-in global variables are allowed by default. Additionally\nusers can allow additional variables via the AllowedVariables option.\n\nNote that backreferences like $1, $2, etc are not global variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_GuardClause",
    "title": "Use a guard clause instead of wrapping the code inside a conditional\nexpression",
    "description": "Use a guard clause instead of wrapping the code inside a conditional\nexpression",
    "timeToFix": 5
  },
  {
    "patternId": "Style_HashSyntax",
    "title": "This cop checks hash literal syntax.\n\nIt can enforce either the use of the class hash rocket syntax or\nthe use of the newer Ruby 1.9 syntax (when applicable).\n\nA separate offense is registered for each problematic pair.\n\nThe supported styles are:\n\n* ruby19 - forces use of the 1.9 syntax (e.g. `{a: 1}`) when hashes have\n  all symbols for keys\n* hash_rockets - forces use of hash rockets for all hashes\n* no_mixed_keys - simply checks for hashes with mixed syntaxes\n* ruby19_no_mixed_keys - forces use of ruby 1.9 syntax and forbids mixed\n  syntax hashes",
    "description": "This cop checks hash literal syntax.\n\nIt can enforce either the use of the class hash rocket syntax or\nthe use of the newer Ruby 1.9 syntax (when applicable).\n\nA separate offense is registered for each problematic pair.\n\nThe supported styles are:\n\n* ruby19 - forces use of the 1.9 syntax (e.g. `{a: 1}`) when hashes have\n  all symbols for keys\n* hash_rockets - forces use of hash rockets for all hashes\n* no_mixed_keys - simply checks for hashes with mixed syntaxes\n* ruby19_no_mixed_keys - forces use of ruby 1.9 syntax and forbids mixed\n  syntax hashes",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IdenticalConditionalBranches",
    "title": "This cop checks for identical lines at the beginning or end of\neach branch of a conditional statement.",
    "description": "This cop checks for identical lines at the beginning or end of\neach branch of a conditional statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfInsideElse",
    "title": "If the `else` branch of a conditional consists solely of an `if` node,\nit can be combined with the `else` to become an `elsif`.\nThis helps to keep the nesting level from getting too deep.",
    "description": "If the `else` branch of a conditional consists solely of an `if` node,\nit can be combined with the `else` to become an `elsif`.\nThis helps to keep the nesting level from getting too deep.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfUnlessModifier",
    "title": "Checks for if and unless statements that would fit on one line\nif written as a modifier if/unless. The maximum line length is\nconfigured in the `Metrics/LineLength` cop.",
    "description": "Checks for if and unless statements that would fit on one line\nif written as a modifier if/unless. The maximum line length is\nconfigured in the `Metrics/LineLength` cop.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfUnlessModifierOfIfUnless",
    "title": "Checks for if and unless statements used as modifiers of other if or\nunless statements.",
    "description": "Checks for if and unless statements used as modifiers of other if or\nunless statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfWithSemicolon",
    "title": "Checks for uses of semicolon in if statements.",
    "description": "Checks for uses of semicolon in if statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ImplicitRuntimeError",
    "title": "This cop checks for `raise` or `fail` statements which do not specify an\nexplicit exception class. (This raises a `RuntimeError`. Some projects\nmight prefer to use exception classes which more precisely identify the\nnature of the error.)",
    "description": "This cop checks for `raise` or `fail` statements which do not specify an\nexplicit exception class. (This raises a `RuntimeError`. Some projects\nmight prefer to use exception classes which more precisely identify the\nnature of the error.)",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InfiniteLoop",
    "title": "Use `Kernel#loop` for infinite loops.",
    "description": "Use `Kernel#loop` for infinite loops.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InverseMethods",
    "title": "This cop check for usages of not (`not` or `!`) called on a method\nwhen an inverse of that method can be used instead.\nMethods that can be inverted by a not (`not` or `!`) should be defined\nin `InverseMethods`\nMethods that are inverted by inverting the return\nof the block that is passed to the method should be defined in\n`InverseBlocks`",
    "description": "This cop check for usages of not (`not` or `!`) called on a method\nwhen an inverse of that method can be used instead.\nMethods that can be inverted by a not (`not` or `!`) should be defined\nin `InverseMethods`\nMethods that are inverted by inverting the return\nof the block that is passed to the method should be defined in\n`InverseBlocks`",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InlineComment",
    "title": "This cop checks for trailing inline comments.",
    "description": "This cop checks for trailing inline comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Lambda",
    "title": "This cop (by default) checks for uses of the lambda literal syntax for\nsingle line lambdas, and the method call syntax for multiline lambdas.\nIt is configurable to enforce one of the styles for both single line\nand multiline lambdas as well.",
    "description": "This cop (by default) checks for uses of the lambda literal syntax for\nsingle line lambdas, and the method call syntax for multiline lambdas.\nIt is configurable to enforce one of the styles for both single line\nand multiline lambdas as well.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_LambdaCall",
    "title": "This cop checks for use of the lambda.(args) syntax.",
    "description": "This cop checks for use of the lambda.(args) syntax.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_LineEndConcatenation",
    "title": "This cop checks for string literal concatenation at\nthe end of a line.",
    "description": "This cop checks for string literal concatenation at\nthe end of a line.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCallWithoutArgsParentheses",
    "title": "This cop checks for unwanted parentheses in parameterless method calls.",
    "description": "This cop checks for unwanted parentheses in parameterless method calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCallWithArgsParentheses",
    "title": "This cop checks presence of parentheses in method calls containing\nparameters. By default, macro methods are ignored. Additional methods\ncan be added to the `IgnoredMethods` list.",
    "description": "This cop checks presence of parentheses in method calls containing\nparameters. By default, macro methods are ignored. Additional methods\ncan be added to the `IgnoredMethods` list.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCalledOnDoEndBlock",
    "title": "This cop checks for methods called on a do...end block. The point of\nthis check is that it's easy to miss the call tacked on to the block\nwhen reading code.",
    "description": "This cop checks for methods called on a do...end block. The point of\nthis check is that it's easy to miss the call tacked on to the block\nwhen reading code.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodDefParentheses",
    "title": "This cops checks for parentheses around the arguments in method\ndefinitions. Both instance and class/singleton methods are checked.",
    "description": "This cops checks for parentheses around the arguments in method\ndefinitions. Both instance and class/singleton methods are checked.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodMissingSuper",
    "title": "This cop checks for the presence of `method_missing` without\nfalling back on `super`.",
    "description": "This cop checks for the presence of `method_missing` without\nfalling back on `super`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MinMax",
    "title": "This cop checks for potential uses of `Enumerable#minmax`.",
    "description": "This cop checks for potential uses of `Enumerable#minmax`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MissingElse",
    "title": "Checks for `if` expressions that do not have an `else` branch.\n\nSupported styles are: if, case, both.",
    "description": "Checks for `if` expressions that do not have an `else` branch.\n\nSupported styles are: if, case, both.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MissingRespondToMissing",
    "title": "This cop checks for the presence of `method_missing` without also\ndefining `respond_to_missing?`.",
    "description": "This cop checks for the presence of `method_missing` without also\ndefining `respond_to_missing?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MixinGrouping",
    "title": "This cop checks for grouping of mixins in `class` and `module` bodies.\nBy default it enforces mixins to be placed in separate declarations,\nbut it can be configured to enforce grouping them in one declaration.",
    "description": "This cop checks for grouping of mixins in `class` and `module` bodies.\nBy default it enforces mixins to be placed in separate declarations,\nbut it can be configured to enforce grouping them in one declaration.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MixinUsage",
    "title": "This cop checks that `include`, `extend` and `prepend` statements appear\ninside classes and modules, not at the top level, so as to not affect\nthe behavior of `Object`.",
    "description": "This cop checks that `include`, `extend` and `prepend` statements appear\ninside classes and modules, not at the top level, so as to not affect\nthe behavior of `Object`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ModuleFunction",
    "title": "This cops checks for use of `extend self` or `module_function` in a\nmodule.\n\nSupported styles are: module_function, extend_self.\n\nThese offenses are not auto-corrected since there are different\nimplications to each approach.",
    "description": "This cops checks for use of `extend self` or `module_function` in a\nmodule.\n\nSupported styles are: module_function, extend_self.\n\nThese offenses are not auto-corrected since there are different\nimplications to each approach.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineBlockChain",
    "title": "This cop checks for chaining of a block after another block that spans\nmultiple lines.",
    "description": "This cop checks for chaining of a block after another block that spans\nmultiple lines.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfThen",
    "title": "Checks for uses of the `then` keyword in multi-line if statements.",
    "description": "Checks for uses of the `then` keyword in multi-line if statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfModifier",
    "title": "Checks for uses of if/unless modifiers with multiple-lines bodies.",
    "description": "Checks for uses of if/unless modifiers with multiple-lines bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineMemoization",
    "title": "This cop checks expressions wrapping styles for multiline memoization.",
    "description": "This cop checks expressions wrapping styles for multiline memoization.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineTernaryOperator",
    "title": "This cop checks for multi-line ternary op expressions.",
    "description": "This cop checks for multi-line ternary op expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultipleComparison",
    "title": "This cop checks against comparing a variable with multiple items, where\n`Array#include?` could be used instead to avoid code repetition.",
    "description": "This cop checks against comparing a variable with multiple items, where\n`Array#include?` could be used instead to avoid code repetition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MutableConstant",
    "title": "This cop checks whether some constant value isn't a\nmutable literal (e.g. array or hash).",
    "description": "This cop checks whether some constant value isn't a\nmutable literal (e.g. array or hash).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NegatedIf",
    "title": "Checks for uses of if with a negated condition. Only ifs\nwithout else are considered. There are three different styles:\n\n  - both\n  - prefix\n  - postfix",
    "description": "Checks for uses of if with a negated condition. Only ifs\nwithout else are considered. There are three different styles:\n\n  - both\n  - prefix\n  - postfix",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NegatedWhile",
    "title": "Checks for uses of while with a negated condition.",
    "description": "Checks for uses of while with a negated condition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedModifier",
    "title": "This cop checks for nested use of if, unless, while and until in their\nmodifier form.",
    "description": "This cop checks for nested use of if, unless, while and until in their\nmodifier form.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedParenthesizedCalls",
    "title": "This cop checks for unparenthesized method calls in the argument list\nof a parenthesized method call.",
    "description": "This cop checks for unparenthesized method calls in the argument list\nof a parenthesized method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedTernaryOperator",
    "title": "This cop checks for nested ternary op expressions.",
    "description": "This cop checks for nested ternary op expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Next",
    "title": "Use `next` to skip iteration instead of a condition at the end.",
    "description": "Use `next` to skip iteration instead of a condition at the end.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NilComparison",
    "title": "This cop checks for comparison of something with nil using ==.",
    "description": "This cop checks for comparison of something with nil using ==.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NonNilCheck",
    "title": "This cop checks for non-nil checks, which are usually redundant.\n\nNon-nil checks are allowed if they are the final nodes of predicate.\n\n  # good\n  def signed_in?\n    !current_user.nil?\n  end",
    "description": "This cop checks for non-nil checks, which are usually redundant.\n\nNon-nil checks are allowed if they are the final nodes of predicate.\n\n  # good\n  def signed_in?\n    !current_user.nil?\n  end",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Not",
    "title": "This cop checks for uses of the keyword `not` instead of `!`.",
    "description": "This cop checks for uses of the keyword `not` instead of `!`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NumericLiterals",
    "title": "This cop checks for big numeric literals without _ between groups\nof digits in them.",
    "description": "This cop checks for big numeric literals without _ between groups\nof digits in them.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NumericLiteralPrefix",
    "title": "This cop checks for octal, hex, binary and decimal literals using\nuppercase prefixes and corrects them to lowercase prefix\nor no prefix (in case of decimals).\neg. for octal use `0o` instead of `0` or `0O`.\n\nCan be configured to use `0` only for octal literals using\n`EnforcedOctalStyle` => `zero_only`",
    "description": "This cop checks for octal, hex, binary and decimal literals using\nuppercase prefixes and corrects them to lowercase prefix\nor no prefix (in case of decimals).\neg. for octal use `0o` instead of `0` or `0O`.\n\nCan be configured to use `0` only for octal literals using\n`EnforcedOctalStyle` => `zero_only`",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NumericPredicate",
    "title": "This cop checks for usage of comparison operators (`==`,\n`>`, `<`) to test numbers as zero, positive, or negative.\nThese can be replaced by their respective predicate methods.\nThe cop can also be configured to do the reverse.\n\nThe cop disregards `#nonzero?` as it its value is truthy or falsey,\nbut not `true` and `false`, and thus not always interchangeable with\n`!= 0`.\n\nThe cop ignores comparisons to global variables, since they are often\npopulated with objects which can be compared with integers, but are\nnot themselves `Integer` polymorphic.",
    "description": "This cop checks for usage of comparison operators (`==`,\n`>`, `<`) to test numbers as zero, positive, or negative.\nThese can be replaced by their respective predicate methods.\nThe cop can also be configured to do the reverse.\n\nThe cop disregards `#nonzero?` as it its value is truthy or falsey,\nbut not `true` and `false`, and thus not always interchangeable with\n`!= 0`.\n\nThe cop ignores comparisons to global variables, since they are often\npopulated with objects which can be compared with integers, but are\nnot themselves `Integer` polymorphic.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OneLineConditional",
    "title": "TODO: Make configurable.\nChecks for uses of if/then/else/end on a single line.",
    "description": "TODO: Make configurable.\nChecks for uses of if/then/else/end on a single line.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OrAssignment",
    "title": "This cop checks for potential usage of the `||=` operator.",
    "description": "This cop checks for potential usage of the `||=` operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OptionHash",
    "title": "This cop checks for options hashes and discourages them if the\ncurrent Ruby version supports keyword arguments.",
    "description": "This cop checks for options hashes and discourages them if the\ncurrent Ruby version supports keyword arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OptionalArguments",
    "title": "This cop checks for optional arguments to methods\nthat do not come at the end of the argument list",
    "description": "This cop checks for optional arguments to methods\nthat do not come at the end of the argument list",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ParallelAssignment",
    "title": "Checks for simple usages of parallel assignment.\nThis will only complain when the number of variables\nbeing assigned matched the number of assigning variables.",
    "description": "Checks for simple usages of parallel assignment.\nThis will only complain when the number of variables\nbeing assigned matched the number of assigning variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ParenthesesAroundCondition",
    "title": "This cop checks for the presence of superfluous parentheses around the\ncondition of if/unless/while/until.",
    "description": "This cop checks for the presence of superfluous parentheses around the\ncondition of if/unless/while/until.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PercentLiteralDelimiters",
    "title": "This cop enforces the consistent usage of `%`-literal delimiters.\n\nSpecify the 'default' key to set all preferred delimiters at once. You\ncan continue to specify individual preferred delimiters to override the\ndefault.",
    "description": "This cop enforces the consistent usage of `%`-literal delimiters.\n\nSpecify the 'default' key to set all preferred delimiters at once. You\ncan continue to specify individual preferred delimiters to override the\ndefault.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PercentQLiterals",
    "title": "This cop checks for usage of the %Q() syntax when %q() would do.",
    "description": "This cop checks for usage of the %Q() syntax when %q() would do.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PerlBackrefs",
    "title": "This cop looks for uses of Perl-style regexp match\nbackreferences like $1, $2, etc.",
    "description": "This cop looks for uses of Perl-style regexp match\nbackreferences like $1, $2, etc.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PreferredHashMethods",
    "title": "This cop (by default) checks for uses of methods Hash#has_key? and\nHash#has_value? where it enforces Hash#key? and Hash#value?\nIt is configurable to enforce the inverse, using `verbose` method\nnames also.",
    "description": "This cop (by default) checks for uses of methods Hash#has_key? and\nHash#has_value? where it enforces Hash#key? and Hash#value?\nIt is configurable to enforce the inverse, using `verbose` method\nnames also.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Proc",
    "title": "This cops checks for uses of Proc.new where Kernel#proc\nwould be more appropriate.",
    "description": "This cops checks for uses of Proc.new where Kernel#proc\nwould be more appropriate.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RaiseArgs",
    "title": "This cop checks the args passed to `fail` and `raise`. For exploded\nstyle (default), it recommends passing the exception class and message\nto `raise`, rather than construct an instance of the error. It will\nstill allow passing just a message, or the construction of an error\nwith more than one argument.\n\nThe exploded style works identically, but with the addition that it\nwill also suggest constructing error objects when the exception is\npassed multiple arguments.",
    "description": "This cop checks the args passed to `fail` and `raise`. For exploded\nstyle (default), it recommends passing the exception class and message\nto `raise`, rather than construct an instance of the error. It will\nstill allow passing just a message, or the construction of an error\nwith more than one argument.\n\nThe exploded style works identically, but with the addition that it\nwill also suggest constructing error objects when the exception is\npassed multiple arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RandomWithOffset",
    "title": "This cop checks for the use of randomly generated numbers,\nadded/subtracted with integer literals, as well as those with\nInteger#succ and Integer#pred methods. Prefer using ranges instead,\nas it clearly states the intentions.",
    "description": "This cop checks for the use of randomly generated numbers,\nadded/subtracted with integer literals, as well as those with\nInteger#succ and Integer#pred methods. Prefer using ranges instead,\nas it clearly states the intentions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantBegin",
    "title": "This cop checks for redundant `begin` blocks.\n\nCurrently it checks for code like this:",
    "description": "This cop checks for redundant `begin` blocks.\n\nCurrently it checks for code like this:",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantException",
    "title": "This cop checks for RuntimeError as the argument of raise/fail.\n\nIt checks for code like this:",
    "description": "This cop checks for RuntimeError as the argument of raise/fail.\n\nIt checks for code like this:",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantFreeze",
    "title": "This cop check for uses of Object#freeze on immutable objects.",
    "description": "This cop check for uses of Object#freeze on immutable objects.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantParentheses",
    "title": "This cop checks for redundant parentheses.",
    "description": "This cop checks for redundant parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantReturn",
    "title": "This cop checks for redundant `return` expressions.",
    "description": "This cop checks for redundant `return` expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantSelf",
    "title": "This cop checks for redundant uses of `self`.\n\nThe usage of `self` is only needed when:\n\n* Sending a message to same object with zero arguments in\n  presence of a method name clash with an argument or a local\n  variable.\n\n* Calling an attribute writer to prevent an local variable assignment.\n\nNote, with using explicit self you can only send messages with public or\nprotected scope, you cannot send private messages this way.\n\nNote we allow uses of `self` with operators because it would be awkward\notherwise.",
    "description": "This cop checks for redundant uses of `self`.\n\nThe usage of `self` is only needed when:\n\n* Sending a message to same object with zero arguments in\n  presence of a method name clash with an argument or a local\n  variable.\n\n* Calling an attribute writer to prevent an local variable assignment.\n\nNote, with using explicit self you can only send messages with public or\nprotected scope, you cannot send private messages this way.\n\nNote we allow uses of `self` with operators because it would be awkward\notherwise.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantConditional",
    "title": "This cop checks for redundant returning of true/false in conditionals.",
    "description": "This cop checks for redundant returning of true/false in conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RegexpLiteral",
    "title": "This cop enforces using // or %r around regular expressions.",
    "description": "This cop enforces using // or %r around regular expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RescueModifier",
    "title": "This cop checks for uses of rescue in its modifier form.",
    "description": "This cop checks for uses of rescue in its modifier form.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RescueStandardError",
    "title": "This cop checks for rescuing `StandardError`. There are two supported\nstyles `implicit` and `explicit`. This cop will not register an offense\nif any error other than `StandardError` is specified.",
    "description": "This cop checks for rescuing `StandardError`. There are two supported\nstyles `implicit` and `explicit`. This cop will not register an offense\nif any error other than `StandardError` is specified.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ReturnNil",
    "title": "This cop enforces consistency between 'return nil' and 'return'.\n\nSupported styles are: return, return_nil.",
    "description": "This cop enforces consistency between 'return nil' and 'return'.\n\nSupported styles are: return, return_nil.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SafeNavigation",
    "title": "This cop transforms usages of a method call safeguarded by a non `nil`\ncheck for the variable whose method is being called to\nsafe navigation (`&.`). If there is a method chain, all of the methods\nin the chain need to be checked for safety, and all of the methods will\nneed to be changed to use safe navigation. We have limited the cop to\nnot register an offense for method chains that exceed 2 methods.\n\nConfiguration option: ConvertCodeThatCanStartToReturnNil\nThe default for this is `false`. When configured to `true`, this will\ncheck for code in the format `!foo.nil? && foo.bar`. As it is written,\nthe return of this code is limited to `false` and whatever the return\nof the method is. If this is converted to safe navigation,\n`foo&.bar` can start returning `nil` as well as what the method\nreturns.",
    "description": "This cop transforms usages of a method call safeguarded by a non `nil`\ncheck for the variable whose method is being called to\nsafe navigation (`&.`). If there is a method chain, all of the methods\nin the chain need to be checked for safety, and all of the methods will\nneed to be changed to use safe navigation. We have limited the cop to\nnot register an offense for method chains that exceed 2 methods.\n\nConfiguration option: ConvertCodeThatCanStartToReturnNil\nThe default for this is `false`. When configured to `true`, this will\ncheck for code in the format `!foo.nil? && foo.bar`. As it is written,\nthe return of this code is limited to `false` and whatever the return\nof the method is. If this is converted to safe navigation,\n`foo&.bar` can start returning `nil` as well as what the method\nreturns.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SelfAssignment",
    "title": "This cop enforces the use the shorthand for self-assignment.",
    "description": "This cop enforces the use the shorthand for self-assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Semicolon",
    "title": "This cop checks for multiple expressions placed on the same line.\nIt also checks for lines terminated with a semicolon.",
    "description": "This cop checks for multiple expressions placed on the same line.\nIt also checks for lines terminated with a semicolon.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Send",
    "title": "This cop checks for the use of the send method.",
    "description": "This cop checks for the use of the send method.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SignalException",
    "title": "This cop checks for uses of `fail` and `raise`.",
    "description": "This cop checks for uses of `fail` and `raise`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SingleLineBlockParams",
    "title": "This cop checks whether the block parameters of a single-line\nmethod accepting a block match the names specified via configuration.\n\nFor instance one can configure `reduce`(`inject`) to use |a, e| as\nparameters.\n\nConfiguration option: Methods\nShould be set to use this cop. Array of hashes, where each key is the\nmethod name and value - array of argument names.",
    "description": "This cop checks whether the block parameters of a single-line\nmethod accepting a block match the names specified via configuration.\n\nFor instance one can configure `reduce`(`inject`) to use |a, e| as\nparameters.\n\nConfiguration option: Methods\nShould be set to use this cop. Array of hashes, where each key is the\nmethod name and value - array of argument names.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SingleLineMethods",
    "title": "This cop checks for single-line method definitions that contain a body.\nIt will accept single-line methods with no body.",
    "description": "This cop checks for single-line method definitions that contain a body.\nIt will accept single-line methods with no body.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SpecialGlobalVars",
    "title": "This cop looks for uses of Perl-style global variables.",
    "description": "This cop looks for uses of Perl-style global variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StabbyLambdaParentheses",
    "title": "Check for parentheses around stabby lambda arguments.\nThere are two different styles. Defaults to `require_parentheses`.",
    "description": "Check for parentheses around stabby lambda arguments.\nThere are two different styles. Defaults to `require_parentheses`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StderrPuts",
    "title": "This cop identifies places where `$stderr.puts` can be replaced by\n`warn`. The latter has the advantage of easily being disabled by,\ne.g. the -W0 interpreter flag, or setting $VERBOSE to nil.",
    "description": "This cop identifies places where `$stderr.puts` can be replaced by\n`warn`. The latter has the advantage of easily being disabled by,\ne.g. the -W0 interpreter flag, or setting $VERBOSE to nil.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringHashKeys",
    "title": "This cop checks for the use of strings as keys in hashes. The use of\nsymbols is preferred instead.",
    "description": "This cop checks for the use of strings as keys in hashes. The use of\nsymbols is preferred instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringLiterals",
    "title": "Checks if uses of quotes match the configured preference.",
    "description": "Checks if uses of quotes match the configured preference.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringLiteralsInInterpolation",
    "title": "This cop checks that quotes inside the string interpolation\nmatch the configured preference.",
    "description": "This cop checks that quotes inside the string interpolation\nmatch the configured preference.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringMethods",
    "title": "This cop enforces the use of consistent method names\nfrom the String class.",
    "description": "This cop enforces the use of consistent method names\nfrom the String class.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StructInheritance",
    "title": "This cop checks for inheritance from Struct.new.",
    "description": "This cop checks for inheritance from Struct.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SymbolArray",
    "title": "This cop can check for array literals made up of symbols that are not\nusing the %i() syntax.\n\nAlternatively, it checks for symbol arrays using the %i() syntax on\nprojects which do not want to use that syntax.\n\nConfiguration option: MinSize\nIf set, arrays with fewer elements than this value will not trigger the\ncop. For example, a `MinSize of `3` will not enforce a style on an array\nof 2 or fewer elements.",
    "description": "This cop can check for array literals made up of symbols that are not\nusing the %i() syntax.\n\nAlternatively, it checks for symbol arrays using the %i() syntax on\nprojects which do not want to use that syntax.\n\nConfiguration option: MinSize\nIf set, arrays with fewer elements than this value will not trigger the\ncop. For example, a `MinSize of `3` will not enforce a style on an array\nof 2 or fewer elements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SymbolLiteral",
    "title": "This cop checks symbol literal syntax.",
    "description": "This cop checks symbol literal syntax.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SymbolProc",
    "title": "Use symbols as procs when possible.",
    "description": "Use symbols as procs when possible.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TernaryParentheses",
    "title": "This cop checks for the presence of parentheses around ternary\nconditions. It is configurable to enforce inclusion or omission of\nparentheses using `EnforcedStyle`. Omission is only enforced when\nremoving the parentheses won't cause a different behavior.",
    "description": "This cop checks for the presence of parentheses around ternary\nconditions. It is configurable to enforce inclusion or omission of\nparentheses using `EnforcedStyle`. Omission is only enforced when\nremoving the parentheses won't cause a different behavior.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnClass",
    "title": "This cop checks for trailing code after the class definition.",
    "description": "This cop checks for trailing code after the class definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnMethodDefinition",
    "title": "This cop checks for trailing code after the method definition.",
    "description": "This cop checks for trailing code after the method definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnModule",
    "title": "This cop checks for trailing code after the module definition.",
    "description": "This cop checks for trailing code after the module definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingCommaInArguments",
    "title": "This cop checks for trailing comma in argument lists.",
    "description": "This cop checks for trailing comma in argument lists.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingCommaInArrayLiteral",
    "title": "This cop checks for trailing comma in array literals.",
    "description": "This cop checks for trailing comma in array literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingCommaInHashLiteral",
    "title": "This cop checks for trailing comma in hash literals.",
    "description": "This cop checks for trailing comma in hash literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingMethodEndStatement",
    "title": "This cop checks for trailing code after the method definition.",
    "description": "This cop checks for trailing code after the method definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingUnderscoreVariable",
    "title": "This cop checks for extra underscores in variable assignment.",
    "description": "This cop checks for extra underscores in variable assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrivialAccessors",
    "title": "This cop looks for trivial reader/writer methods, that could\nhave been created with the attr_* family of functions automatically.",
    "description": "This cop looks for trivial reader/writer methods, that could\nhave been created with the attr_* family of functions automatically.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnlessElse",
    "title": "This cop looks for *unless* expressions with *else* clauses.",
    "description": "This cop looks for *unless* expressions with *else* clauses.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnneededCapitalW",
    "title": "This cop checks for usage of the %W() syntax when %w() would do.",
    "description": "This cop checks for usage of the %W() syntax when %w() would do.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnneededInterpolation",
    "title": "This cop checks for strings that are just an interpolated expression.",
    "description": "This cop checks for strings that are just an interpolated expression.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnneededPercentQ",
    "title": "This cop checks for usage of the %q/%Q syntax when '' or \"\" would do.",
    "description": "This cop checks for usage of the %q/%Q syntax when '' or \"\" would do.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnpackFirst",
    "title": "This cop checks for accessing the first element of `String#unpack`\nwhich can be replaced with the shorter method `unpack1`.",
    "description": "This cop checks for accessing the first element of `String#unpack`\nwhich can be replaced with the shorter method `unpack1`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_VariableInterpolation",
    "title": "This cop checks for variable interpolation (like \"#@ivar\").",
    "description": "This cop checks for variable interpolation (like \"#@ivar\").",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhenThen",
    "title": "This cop checks for *when;* uses in *case* expressions.",
    "description": "This cop checks for *when;* uses in *case* expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhileUntilDo",
    "title": "Checks for uses of `do` in multi-line `while/until` statements.",
    "description": "Checks for uses of `do` in multi-line `while/until` statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhileUntilModifier",
    "title": "Checks for while and until statements that would fit on one line\nif written as a modifier while/until. The maximum line length is\nconfigured in the `Metrics/LineLength` cop.",
    "description": "Checks for while and until statements that would fit on one line\nif written as a modifier while/until. The maximum line length is\nconfigured in the `Metrics/LineLength` cop.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WordArray",
    "title": "This cop can check for array literals made up of word-like\nstrings, that are not using the %w() syntax.\n\nAlternatively, it can check for uses of the %w() syntax, in projects\nwhich do not want to include that syntax.\n\nConfiguration option: MinSize\nIf set, arrays with fewer elements than this value will not trigger the\ncop. For example, a `MinSize` of `3` will not enforce a style on an\narray of 2 or fewer elements.",
    "description": "This cop can check for array literals made up of word-like\nstrings, that are not using the %w() syntax.\n\nAlternatively, it can check for uses of the %w() syntax, in projects\nwhich do not want to include that syntax.\n\nConfiguration option: MinSize\nIf set, arrays with fewer elements than this value will not trigger the\ncop. For example, a `MinSize` of `3` will not enforce a style on an\narray of 2 or fewer elements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_YodaCondition",
    "title": "This cop checks for Yoda conditions, i.e. comparison operations where\nreadability is reduced because the operands are not ordered the same\nway as they would be ordered in spoken English.",
    "description": "This cop checks for Yoda conditions, i.e. comparison operations where\nreadability is reduced because the operands are not ordered the same\nway as they would be ordered in spoken English.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ZeroLengthPredicate",
    "title": "This cop checks for numeric comparisons that can be replaced\nby a predicate method, such as receiver.length == 0,\nreceiver.length > 0, receiver.length != 0,\nreceiver.length < 1 and receiver.size == 0 that can be\nreplaced by receiver.empty? and !receiver.empty.",
    "description": "This cop checks for numeric comparisons that can be replaced\nby a predicate method, such as receiver.length == 0,\nreceiver.length > 0, receiver.length != 0,\nreceiver.length < 1 and receiver.size == 0 that can be\nreplaced by receiver.empty? and !receiver.empty.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActionFilter",
    "title": "This cop enforces the consistent use of action filter methods.\n\nThe cop is configurable and can enforce the use of the older\nsomething_filter methods or the newer something_action methods.\n\nIf the TargetRailsVersion is set to less than 4.0, the cop will enforce\nthe use of filter methods.",
    "description": "This cop enforces the consistent use of action filter methods.\n\nThe cop is configurable and can enforce the use of the older\nsomething_filter methods or the newer something_action methods.\n\nIf the TargetRailsVersion is set to less than 4.0, the cop will enforce\nthe use of filter methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActiveRecordAliases",
    "title": "Checks that ActiveRecord aliases are not used. The direct method names\nare more clear and easier to read.",
    "description": "Checks that ActiveRecord aliases are not used. The direct method names\nare more clear and easier to read.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActiveSupportAliases",
    "title": "This cop checks that ActiveSupport aliases to core ruby methods\nare not used.",
    "description": "This cop checks that ActiveSupport aliases to core ruby methods\nare not used.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationJob",
    "title": "This cop checks that jobs subclass ApplicationJob with Rails 5.0.",
    "description": "This cop checks that jobs subclass ApplicationJob with Rails 5.0.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationRecord",
    "title": "This cop checks that models subclass ApplicationRecord with Rails 5.0.",
    "description": "This cop checks that models subclass ApplicationRecord with Rails 5.0.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_AssertNot",
    "title": "Use `assert_not` instead of `assert !`.",
    "description": "Use `assert_not` instead of `assert !`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Blank",
    "title": "This cops checks for code that can be changed to `blank?`.\nSettings:\n  NilOrEmpty: Convert checks for `nil` or `empty?` to `blank?`\n  NotPresent: Convert usages of not `present?` to `blank?`\n  UnlessPresent: Convert usages of `unless` `present?` to `blank?`",
    "description": "This cops checks for code that can be changed to `blank?`.\nSettings:\n  NilOrEmpty: Convert checks for `nil` or `empty?` to `blank?`\n  NotPresent: Convert usages of not `present?` to `blank?`\n  UnlessPresent: Convert usages of `unless` `present?` to `blank?`",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_CreateTableWithTimestamps",
    "title": "This cop checks the migration for which timestamps are not included\nwhen creating a new table.\nIn many cases, timestamps are useful information and should be added.",
    "description": "This cop checks the migration for which timestamps are not included\nwhen creating a new table.\nIn many cases, timestamps are useful information and should be added.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Date",
    "title": "This cop checks for the correct use of Date methods,\nsuch as Date.today, Date.current etc.\n\nUsing Date.today is dangerous, because it doesn't know anything about\nRails time zone. You must use Time.zone.today instead.\n\nThe cop also reports warnings when you are using 'to_time' method,\nbecause it doesn't know about Rails time zone either.\n\nTwo styles are supported for this cop. When EnforcedStyle is 'strict'\nthen the Date methods (today, current, yesterday, tomorrow)\nare prohibited and the usage of both 'to_time'\nand 'to_time_in_current_zone' is reported as warning.\n\nWhen EnforcedStyle is 'flexible' then only 'Date.today' is prohibited\nand only 'to_time' is reported as warning.",
    "description": "This cop checks for the correct use of Date methods,\nsuch as Date.today, Date.current etc.\n\nUsing Date.today is dangerous, because it doesn't know anything about\nRails time zone. You must use Time.zone.today instead.\n\nThe cop also reports warnings when you are using 'to_time' method,\nbecause it doesn't know about Rails time zone either.\n\nTwo styles are supported for this cop. When EnforcedStyle is 'strict'\nthen the Date methods (today, current, yesterday, tomorrow)\nare prohibited and the usage of both 'to_time'\nand 'to_time_in_current_zone' is reported as warning.\n\nWhen EnforcedStyle is 'flexible' then only 'Date.today' is prohibited\nand only 'to_time' is reported as warning.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_DynamicFindBy",
    "title": "This cop checks dynamic `find_by_*` methods.\nUse `find_by` instead of dynamic method.\nSee. https://github.com/bbatsov/rails-style-guide#find_by",
    "description": "This cop checks dynamic `find_by_*` methods.\nUse `find_by` instead of dynamic method.\nSee. https://github.com/bbatsov/rails-style-guide#find_by",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Delegate",
    "title": "This cop looks for delegations that could have been created\nautomatically with the `delegate` method.\n\nSafe navigation `&.` is ignored because Rails' `allow_nil`\noption checks not just for nil but also delegates if nil\nresponds to the delegated method.\n\nThe `EnforceForPrefixed` option (defaulted to `true`) means that\nusing the target object as a prefix of the method name\nwithout using the `delegate` method will be a violation.\nWhen set to `false`, this case is legal.",
    "description": "This cop looks for delegations that could have been created\nautomatically with the `delegate` method.\n\nSafe navigation `&.` is ignored because Rails' `allow_nil`\noption checks not just for nil but also delegates if nil\nresponds to the delegated method.\n\nThe `EnforceForPrefixed` option (defaulted to `true`) means that\nusing the target object as a prefix of the method name\nwithout using the `delegate` method will be a violation.\nWhen set to `false`, this case is legal.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_DelegateAllowBlank",
    "title": "This cop looks for delegations that pass :allow_blank as an option\ninstead of :allow_nil. :allow_blank is not a valid option to pass\nto ActiveSupport#delegate.",
    "description": "This cop looks for delegations that pass :allow_blank as an option\ninstead of :allow_nil. :allow_blank is not a valid option to pass\nto ActiveSupport#delegate.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_EnumUniqueness",
    "title": "This cop looks for duplicate values in enum declarations.",
    "description": "This cop looks for duplicate values in enum declarations.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_EnvironmentComparison",
    "title": "This cop checks that Rails.env is compared using `.production?`-like\nmethods instead of equality against a string or symbol.",
    "description": "This cop checks that Rails.env is compared using `.production?`-like\nmethods instead of equality against a string or symbol.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Exit",
    "title": "This cop enforces that 'exit' calls are not used within a rails app.\nValid options are instead to raise an error, break, return or some\nother form of stopping execution of current request.\n\nThere are two obvious cases where 'exit' is particularly harmful:\n\n- Usage in library code for your application. Even though rails will\nrescue from a SystemExit and continue on, unit testing that library\ncode will result in specs exiting (potentially silently if exit(0)\nis used.)\n- Usage in application code outside of the web process could result in\nthe program exiting, which could result in the code failing to run and\ndo its job.",
    "description": "This cop enforces that 'exit' calls are not used within a rails app.\nValid options are instead to raise an error, break, return or some\nother form of stopping execution of current request.\n\nThere are two obvious cases where 'exit' is particularly harmful:\n\n- Usage in library code for your application. Even though rails will\nrescue from a SystemExit and continue on, unit testing that library\ncode will result in specs exiting (potentially silently if exit(0)\nis used.)\n- Usage in application code outside of the web process could result in\nthe program exiting, which could result in the code failing to run and\ndo its job.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FilePath",
    "title": "This cop is used to identify usages of file path joining process\nto use `Rails.root.join` clause. This is to avoid bugs on operating\nsystem that don't use '/' as the path separator.",
    "description": "This cop is used to identify usages of file path joining process\nto use `Rails.root.join` clause. This is to avoid bugs on operating\nsystem that don't use '/' as the path separator.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FindBy",
    "title": "This cop is used to identify usages of `where.first` and\nchange them to use `find_by` instead.",
    "description": "This cop is used to identify usages of `where.first` and\nchange them to use `find_by` instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FindEach",
    "title": "This cop is used to identify usages of `all.each` and\nchange them to use `all.find_each` instead.",
    "description": "This cop is used to identify usages of `all.each` and\nchange them to use `all.find_each` instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HasAndBelongsToMany",
    "title": "This cop checks for the use of the has_and_belongs_to_many macro.",
    "description": "This cop checks for the use of the has_and_belongs_to_many macro.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HasManyOrHasOneDependent",
    "title": "This cop looks for `has_many` or `has_one` associations that don't\nspecify a `:dependent` option.\nIt doesn't register an offense if `:through` option was specified.",
    "description": "This cop looks for `has_many` or `has_one` associations that don't\nspecify a `:dependent` option.\nIt doesn't register an offense if `:through` option was specified.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HttpPositionalArguments",
    "title": "This cop is used to identify usages of http methods like `get`, `post`,\n`put`, `patch` without the usage of keyword arguments in your tests and\nchange them to use keyword args.  This cop only applies to Rails >= 5 .\nIf you are running Rails < 5 you should disable the\nRails/HttpPositionalArguments cop or set your TargetRailsVersion in your\n.rubocop.yml file to 4.0, etc.",
    "description": "This cop is used to identify usages of http methods like `get`, `post`,\n`put`, `patch` without the usage of keyword arguments in your tests and\nchange them to use keyword args.  This cop only applies to Rails >= 5 .\nIf you are running Rails < 5 you should disable the\nRails/HttpPositionalArguments cop or set your TargetRailsVersion in your\n.rubocop.yml file to 4.0, etc.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HttpStatus",
    "title": "Enforces use of symbolic or numeric value to define HTTP status.",
    "description": "Enforces use of symbolic or numeric value to define HTTP status.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_InverseOf",
    "title": "This cop looks for has_(one|many) and belongs_to associations where\nActive Record can't automatically determine the inverse association\nbecause of a scope or the options used. Using the blog with order scope\nexample below, traversing the a Blog's association in both directions\nwith `blog.posts.first.blog` would cause the `blog` to be loaded from\nthe database twice.\n\n`:inverse_of` must be manually specified for Active Record to use the\nassociated object in memory, or set to `false` to opt-out. Note that\nsetting `nil` does not stop Active Record from trying to determine the\ninverse automatically, and is not considered a valid value for this.",
    "description": "This cop looks for has_(one|many) and belongs_to associations where\nActive Record can't automatically determine the inverse association\nbecause of a scope or the options used. Using the blog with order scope\nexample below, traversing the a Blog's association in both directions\nwith `blog.posts.first.blog` would cause the `blog` to be loaded from\nthe database twice.\n\n`:inverse_of` must be manually specified for Active Record to use the\nassociated object in memory, or set to `false` to opt-out. Note that\nsetting `nil` does not stop Active Record from trying to determine the\ninverse automatically, and is not considered a valid value for this.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_LexicallyScopedActionFilter",
    "title": "This cop checks that methods specified in the filter's `only`\nor `except` options are explicitly defined in the class or module.\n\nYou can specify methods of superclass or methods added by mixins\non the filter, but these confuse developers. If you specify methods\nwhere are defined on another classes or modules, you should define\nthe filter in that class or module.",
    "description": "This cop checks that methods specified in the filter's `only`\nor `except` options are explicitly defined in the class or module.\n\nYou can specify methods of superclass or methods added by mixins\non the filter, but these confuse developers. If you specify methods\nwhere are defined on another classes or modules, you should define\nthe filter in that class or module.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_NotNullColumn",
    "title": "This cop checks for add_column call with NOT NULL constraint\nin migration file.",
    "description": "This cop checks for add_column call with NOT NULL constraint\nin migration file.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_OutputSafety",
    "title": "This cop checks for the use of output safety calls like html_safe,\nraw, and safe_concat. These methods do not escape content. They\nsimply return a SafeBuffer containing the content as is. Instead,\nuse safe_join to join content and escape it and concat to\nconcatenate content and escape it, ensuring its safety.",
    "description": "This cop checks for the use of output safety calls like html_safe,\nraw, and safe_concat. These methods do not escape content. They\nsimply return a SafeBuffer containing the content as is. Instead,\nuse safe_join to join content and escape it and concat to\nconcatenate content and escape it, ensuring its safety.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Output",
    "title": "This cop checks for the use of output calls like puts and print",
    "description": "This cop checks for the use of output calls like puts and print",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_PluralizationGrammar",
    "title": "This cop checks for correct grammar when using ActiveSupport's\ncore extensions to the numeric classes.",
    "description": "This cop checks for correct grammar when using ActiveSupport's\ncore extensions to the numeric classes.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Presence",
    "title": "This cop checks code that can be written more easily using\n`Object#presence` defined by Active Support.",
    "description": "This cop checks code that can be written more easily using\n`Object#presence` defined by Active Support.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Present",
    "title": "This cops checks for code that can be changed to `blank?`.\nSettings:\n  NotNilAndNotEmpty: Convert checks for not `nil` and `not empty?`\n                     to `present?`\n  NotBlank: Convert usages of not `blank?` to `present?`\n  UnlessBlank: Convert usages of `unless` `blank?` to `if` `present?`",
    "description": "This cops checks for code that can be changed to `blank?`.\nSettings:\n  NotNilAndNotEmpty: Convert checks for not `nil` and `not empty?`\n                     to `present?`\n  NotBlank: Convert usages of not `blank?` to `present?`\n  UnlessBlank: Convert usages of `unless` `blank?` to `if` `present?`",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ReadWriteAttribute",
    "title": "This cop checks for the use of the read_attribute or write_attribute\nmethods, and recommends square brackets instead.\n\nIf an attribute is missing from the instance (for example, when\ninitialized by a partial `select`) then read_attribute will return nil,\nbut square brackets will raise an ActiveModel::MissingAttributeError.\n\nExplicitly raising an error in this situation is preferable, and that\nis why rubocop recommends using square brackets.",
    "description": "This cop checks for the use of the read_attribute or write_attribute\nmethods, and recommends square brackets instead.\n\nIf an attribute is missing from the instance (for example, when\ninitialized by a partial `select`) then read_attribute will return nil,\nbut square brackets will raise an ActiveModel::MissingAttributeError.\n\nExplicitly raising an error in this situation is preferable, and that\nis why rubocop recommends using square brackets.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RedundantReceiverInWithOptions",
    "title": "This cop checks for redundant receiver in `with_options`.\nReceiver is implicit from Rails 4.2 or higher.",
    "description": "This cop checks for redundant receiver in `with_options`.\nReceiver is implicit from Rails 4.2 or higher.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RefuteMethods",
    "title": "Use `assert_not` methods instead of `refute` methods.",
    "description": "Use `assert_not` methods instead of `refute` methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RequestReferer",
    "title": "This cop checks for consistent uses of `request.referer` or\n`request.referrer`, depending on the cop's configuration.",
    "description": "This cop checks for consistent uses of `request.referer` or\n`request.referrer`, depending on the cop's configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ReversibleMigration",
    "title": "This cop checks whether the change method of the migration file is\nreversible.",
    "description": "This cop checks whether the change method of the migration file is\nreversible.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RelativeDateConstant",
    "title": "This cop checks whether constant value isn't relative date.\nBecause the relative date will be evaluated only once.",
    "description": "This cop checks whether constant value isn't relative date.\nBecause the relative date will be evaluated only once.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SafeNavigation",
    "title": "This cop converts usages of `try!` to `&.`. It can also be configured\nto convert `try`. It will convert code to use safe navigation if the\ntarget Ruby version is set to 2.3+",
    "description": "This cop converts usages of `try!` to `&.`. It can also be configured\nto convert `try`. It will convert code to use safe navigation if the\ntarget Ruby version is set to 2.3+",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SaveBang",
    "title": "This cop identifies possible cases where Active Record save! or related\nshould be used instead of save because the model might have failed to\nsave and an exception is better than unhandled failure.\n\nThis will ignore calls that return a boolean for success if the result\nis assigned to a variable or used as the condition in an if/unless\nstatement.  It will also ignore calls that return a model assigned to a\nvariable that has a call to `persisted?`. Finally, it will ignore any\ncall with more than 2 arguments as that is likely not an Active Record\ncall or a Model.update(id, attributes) call.",
    "description": "This cop identifies possible cases where Active Record save! or related\nshould be used instead of save because the model might have failed to\nsave and an exception is better than unhandled failure.\n\nThis will ignore calls that return a boolean for success if the result\nis assigned to a variable or used as the condition in an if/unless\nstatement.  It will also ignore calls that return a model assigned to a\nvariable that has a call to `persisted?`. Finally, it will ignore any\ncall with more than 2 arguments as that is likely not an Active Record\ncall or a Model.update(id, attributes) call.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ScopeArgs",
    "title": "This cop checks for scope calls where it was passed\na method (usually a scope) instead of a lambda/proc.",
    "description": "This cop checks for scope calls where it was passed\na method (usually a scope) instead of a lambda/proc.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SkipsModelValidations",
    "title": "This cop checks for the use of methods which skip\nvalidations which are listed in\nhttp://guides.rubyonrails.org/active_record_validations.html#skipping-validations",
    "description": "This cop checks for the use of methods which skip\nvalidations which are listed in\nhttp://guides.rubyonrails.org/active_record_validations.html#skipping-validations",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_TimeZone",
    "title": "This cop checks for the use of Time methods without zone.\n\nBuilt on top of Ruby on Rails style guide (https://github.com/bbatsov/rails-style-guide#time)\nand the article http://danilenko.org/2012/7/6/rails_timezones/ .\n\nTwo styles are supported for this cop. When EnforcedStyle is 'strict'\nthen only use of Time.zone is allowed.\n\nWhen EnforcedStyle is 'flexible' then it's also allowed\nto use Time.in_time_zone.",
    "description": "This cop checks for the use of Time methods without zone.\n\nBuilt on top of Ruby on Rails style guide (https://github.com/bbatsov/rails-style-guide#time)\nand the article http://danilenko.org/2012/7/6/rails_timezones/ .\n\nTwo styles are supported for this cop. When EnforcedStyle is 'strict'\nthen only use of Time.zone is allowed.\n\nWhen EnforcedStyle is 'flexible' then it's also allowed\nto use Time.in_time_zone.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_UniqBeforePluck",
    "title": "Prefer the use of uniq (or distinct), before pluck instead of after.\n\nThe use of uniq before pluck is preferred because it executes within\nthe database.\n\nThis cop has two different enforcement modes. When the EnforcedStyle\nis conservative (the default) then only calls to pluck on a constant\n(i.e. a model class) before uniq are added as offenses.\n\nWhen the EnforcedStyle is aggressive then all calls to pluck before\nuniq are added as offenses. This may lead to false positives as the cop\ncannot distinguish between calls to pluck on an ActiveRecord::Relation\nvs a call to pluck on an ActiveRecord::Associations::CollectionProxy.\n\nAutocorrect is disabled by default for this cop since it may generate\nfalse positives.",
    "description": "Prefer the use of uniq (or distinct), before pluck instead of after.\n\nThe use of uniq before pluck is preferred because it executes within\nthe database.\n\nThis cop has two different enforcement modes. When the EnforcedStyle\nis conservative (the default) then only calls to pluck on a constant\n(i.e. a model class) before uniq are added as offenses.\n\nWhen the EnforcedStyle is aggressive then all calls to pluck before\nuniq are added as offenses. This may lead to false positives as the cop\ncannot distinguish between calls to pluck on an ActiveRecord::Relation\nvs a call to pluck on an ActiveRecord::Associations::CollectionProxy.\n\nAutocorrect is disabled by default for this cop since it may generate\nfalse positives.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_UnknownEnv",
    "title": "This cop checks that environments called with `Rails.env` predicates\nexist.",
    "description": "This cop checks that environments called with `Rails.env` predicates\nexist.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Validation",
    "title": "This cop checks for the use of old-style attribute validation macros.",
    "description": "This cop checks for the use of old-style attribute validation macros.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_Eval",
    "title": "This cop checks for the use of `Kernel#eval` and `Binding#eval`.",
    "description": "This cop checks for the use of `Kernel#eval` and `Binding#eval`.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_JSONLoad",
    "title": "This cop checks for the use of JSON class methods which have potential\nsecurity issues.\n\nAutocorrect is disabled by default because it's potentially dangerous.\nIf using a stream, like `JSON.load(open('file'))`, it will need to call\n`#read` manually, like `JSON.parse(open('file').read)`.\nIf reading single values (rather than proper JSON objects), like\n`JSON.load('false')`, it will need to pass the `quirks_mode: true`\noption, like `JSON.parse('false', quirks_mode: true)`.\nOther similar issues may apply.",
    "description": "This cop checks for the use of JSON class methods which have potential\nsecurity issues.\n\nAutocorrect is disabled by default because it's potentially dangerous.\nIf using a stream, like `JSON.load(open('file'))`, it will need to call\n`#read` manually, like `JSON.parse(open('file').read)`.\nIf reading single values (rather than proper JSON objects), like\n`JSON.load('false')`, it will need to pass the `quirks_mode: true`\noption, like `JSON.parse('false', quirks_mode: true)`.\nOther similar issues may apply.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_MarshalLoad",
    "title": "This cop checks for the use of Marshal class methods which have\npotential security issues leading to remote code execution when\nloading from an untrusted source.",
    "description": "This cop checks for the use of Marshal class methods which have\npotential security issues leading to remote code execution when\nloading from an untrusted source.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_Open",
    "title": "This cop checks for the use of `Kernel#open`.\n`Kernel#open` enables not only file access but also process invocation\nby prefixing a pipe symbol (e.g., `open(\"| ls\")`).  So, it may lead to\na serious security risk by using variable input to the argument of\n`Kernel#open`.  It would be better to use `File.open` or `IO.popen`\nexplicitly.",
    "description": "This cop checks for the use of `Kernel#open`.\n`Kernel#open` enables not only file access but also process invocation\nby prefixing a pipe symbol (e.g., `open(\"| ls\")`).  So, it may lead to\na serious security risk by using variable input to the argument of\n`Kernel#open`.  It would be better to use `File.open` or `IO.popen`\nexplicitly.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_YAMLLoad",
    "title": "This cop checks for the use of YAML class methods which have\npotential security issues leading to remote code execution when\nloading from an untrusted source.",
    "description": "This cop checks for the use of YAML class methods which have\npotential security issues leading to remote code execution when\nloading from an untrusted source.",
    "timeToFix": 5
  },
  {
    "patternId": "InternalAffairs_NodeDestructuring",
    "title": "Checks that node destructuring is done either using the node\nextensions or using a splat.",
    "description": "Checks that node destructuring is done either using the node\nextensions or using a splat.",
    "timeToFix": 5
  },
  {
    "patternId": "InternalAffairs_NodeTypePredicate",
    "title": "Checks that node types are checked using the predicate helpers.",
    "description": "Checks that node types are checked using the predicate helpers.",
    "timeToFix": 5
  },
  {
    "patternId": "InternalAffairs_OffenseLocationKeyword",
    "title": "Checks for potential uses of the location keywords which can be used as\nshortcut arguments to `#add_offense`.",
    "description": "Checks for potential uses of the location keywords which can be used as\nshortcut arguments to `#add_offense`.",
    "timeToFix": 5
  },
  {
    "patternId": "InternalAffairs_RedundantMessageArgument",
    "title": "Checks for redundant message arguments to `#add_offense`. This method\nwill automatically use `#message` or `MSG` (in that order of priority)\nif they are defined.",
    "description": "Checks for redundant message arguments to `#add_offense`. This method\nwill automatically use `#message` or `MSG` (in that order of priority)\nif they are defined.",
    "timeToFix": 5
  },
  {
    "patternId": "InternalAffairs_RedundantLocationArgument",
    "title": "Checks for redundant `location` argument to `#add_offense`. `location`\nargument has a default value of `:expression` and this method will\nautomatically use it.",
    "description": "Checks for redundant `location` argument to `#add_offense`. `location`\nargument has a default value of `:expression` and this method will\nautomatically use it.",
    "timeToFix": 5
  },
  {
    "patternId": "InternalAffairs_UselessMessageAssertion",
    "title": "Checks that cops are not tested using `described_class::MSG`.",
    "description": "Checks that cops are not tested using `described_class::MSG`.",
    "timeToFix": 5
  },
  {
    "patternId": "Test_ClassMustBeAModuleCop",
    "title": "",
    "description": "",
    "timeToFix": 5
  },
  {
    "patternId": "Test_ModuleMustBeAClassCop",
    "title": "",
    "description": "",
    "timeToFix": 5
  }
]